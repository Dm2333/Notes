
[#Practical](#Practical) Byzantine Fault Tolerance

https://www.usenix.org/legacy/events/osdi99/full_papers/castro/castro_html/node1.html#SECTION00010000000000000000

#Abstract

This paper describes a new replication algorithm that is able to tolerate Byzantine faults. We believe that Byzantine-fault-tolerant algorithms will be increasingly important in the future because malicious attacks and software errors are increasingly common and *can cause faulty nodes to exhibit arbitrary behavior*. Whereas previous algorithms assumed a synchronous system or were too slow to be used in practice, the algorithm described in this paper is practical: it works in asynchronous environments like the Internet and incorporates several important optimizations that improve the response time of previous algorithms by more than an order of magnitude. We implemented a Byzantine-fault-tolerant NFS service using our algorithm and measured its performance. The results show that our service is only 3% slower than a standard unreplicated NFS. 

----

#Introduction

Malicious attacks and software errors are increasing common. The growing reliance of industry and government on online information services makes malicious attacks more attractive and makes the consequences of successful attacks more serious. In addijtion, the number of software errors is increasing due to the growth in size and complexity of sotware. Since malicious attacks and software errors can cause faulty nodes to exhibit Byzantine (i.e., arbitrary) behavior, Byzantine-fault-tolerant algorithms are increasingly important.

This paper presents a new, practical algorithm for state machine replication [34, 17] that tolerates Byzantine faults. *The algorithm offers both liveness and safety provided at most (n-1)/3  out of a total of n replicas are simultaneously faulty*. This means that clients eventually receive replies to their requests and those replies are correct according to linearizability [4, 14]. The algorithm works in asynchronous systems like the Internet and it incorporates important optimizations that enable it to perform efficiently. 

There is a significant body of work on agreement and replication techniques that tolerate Byzantine faults (starting with [19]). *However, most earlier work (e.g., [10, 24, 3]) either concerns techniques designed to demonstrate theoretical feasibility that are too inefficient to be used in practice, or assumes synchrony*, i.e., relies on known bounds on message delays and process speeds. The systems closest to ours, Rampart [30] and SecureRing [16], were designed to be practical, but they rely on the synchrony assumption for correctness, which is dangerous in the presence of malicious attacks. An attacker may compromise the safety of a service by delaying non-faulty nodes or the communication between them until they are tagged as faulty and excluded from the replica group. Such a denial-of-service attack is generally easier than gaining control over a non-faulty node. 

Our algorithm is not vulnerable to this type of attack because it does not rely on synchrony for safety. In addition, it improves the performance of Rampart and SecureRing by more than an order of magnitude as explained in Section 7. It uses only one message round trip to execute read-only operations and two to execute read-write operations. Also, it uses an efficient authentication scheme based on message authentication codes during normal operation; public-key cryptography, which was cited as the major latency [29] and throughput [22] bottleneck in Rampart, is used only when there are faults. 

> Not rely on synchrony
> Performance improved
> Efficient authentication scheme
> usage of Cryptography is reduced

To evaluate our approach, we implemented a replication library and used it to implement a real service: a Byzantine-fault-tolerant distributed file system that supports the NFS protocol. We used the Andrew benchmark [15] to evaluate the performance of our system. The results show that our system is only 3% slower than the standard NFS daemon in the Digital Unix kernel during normal-case operation. 

Thus, the paper makes the following contributions:

- It describes **the first state-machine replication protocol** that correctly survives Byzantine faults in asynchronous networks.
- It describes a number of important optimizations that allow the algorithm to perform well so that it can be used in real systems.
- It describes the implementation of a Byzantine-fault-tolerant distributed file system.
- It provides experimental results that quantify the cost of the replication technique.

The remainder of the paper is organized as follows. 

- We begin by describing our system model, including our failure assumptions. 
- Section 3 describes the problem solved by the algorithm and states correctness conditions. 
- The algorithm is described in Section 4 
- some important optimizations are described in Section 5. 
- Section 6 describes our replication library and how we used it to implement a Byzantine-fault-tolerant NFS. 
- Section 7 presents the results of our experiments. 
- Section 8 discusses related work. We conclude with a summary of what we have accomplished and a discussion of future research directions. 

----





