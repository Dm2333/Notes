


#压缩列表

压缩列表是列表键和哈希键的底层实现之一. 当一个列表键质保函少量列表项, 并且每个列表项要么就是小整数值, 要么就是长度比较短的字符串, 那么Redis就会使用压缩列表来做列表键的底层实现.

    redis> RPUSH lst 1 3 5 100086 "hello" "world"
    (integer)6
    redis> OBJECT ENCODING lst
    "ziplist"

另外, 当一个哈希键只包含少量键值对, 并且每个键值对的键和值要么就是小整数值, 要么就是长度比较短的字符串, 那么Redis就会使用压缩列表来做哈希键的底层实现.

    redis> HMSET profile 1 3 5 100086 "hello" "world"
    OK
    redis> OBJECT ENCODING profile
    "ziplist"

----

##压缩表构成

是由一系列特殊编码的连续内存块组成的顺序型数据结构. 一个压缩列表可以包含任意多个节点, 每个节点可以保存一个字节数组或者一个整数值.

1. zlbytes

    uint32_t, 整个压缩列表占用的内存字节数
2. zltail

    uint32_t, 记录压缩列表尾节点距离其实字节有多少字节
3. zllen

    uint16_t, 记录压缩列表包含的节点数量
4. entryX

    列表节点, 压缩列表包含的各个节点, 节点长度由节点保存内容决定
5. zlend

    uint8_t, 特殊值0xFF, 用来标记压缩节点尾端

----

##压缩列表节点的构成

每个压缩列表节点可以保存一个字节数组或者一个整数值, 其中, 字节数组可以是一下三种长度的其中一种:
1. 长度小于等于2^6-1字节的字节数组
2. 长度小于等于2^14-1字节的字节数组
3. 长度小于等于2^32-1字节的字节数组

整数值则可以使一下6中长度的其中一种:
1. 4位长, 介于0-12的无符号整数
2. 1字节长的有符号整数
3. 3字节长的有符号整数
4. int16_t类型整数
5. int32_t类型整数
6. int64_t类型整数

每个压缩列表节点都由previous_entry_length, encoding, content三部分组成

###`previous_entry_length`

节点的previous_entry_length属性以字节为单位, 记录了压缩列表中前一个节点的长度.  previous_entry_length属性的长度可以是1字节或者5字节:























