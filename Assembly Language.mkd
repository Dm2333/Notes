

#Opcode

不管计算机技术的发展如何日新月异，其最基本的东西是不会突然改变的。OpCode就是这其中的一样东西

OpCode就是Operation Code，意即操作码的意思。 

当Assembler遇到“NOP”的时候，为了生成让计算机能运行的“东西”（暂且这样称呼吧），就会以十六进制数“0x90”来代替它。

在这里，“0x90”就是“OpCode”，而“NOP”则是“助记符(mnemonic)”

> 助记符与OpCode并非一一对应关系

----

有6个域是OpCode可能会用到的，或者说OpCode是由这6个域组成的――不过请注意：它们的名字是什么，这并不重要――重要的是它们的排列顺序。

1. Prefixes
1. code(必定会有)
1. ModR/M
1. SIB
1. Displacement
1. Immediate

> 虽然并不是6个域都是必要的，但是，它们的排列顺序绝对不能乱，必须严格按照上面的顺序进行。有些域也许不会出现，但是只要出现了，编号小的域就绝对不允许出现在编号大的域的后面，反之亦然。

----

##解码

> Everything that has a beginning... Has an end.
-- Neo, The Movie - "The Matrix: Revolutions"(2003)

CPU有个寄存器叫做EIP，它储存了内存中的某个地址，这个地址会告诉CPU，哪里是当前指令的开始；但是，在CPU没有对OpCode进行解码之前，它并不会知道哪里才是指令的结束。

`00401000    90    NOP`
第一列表示的是内存中的地址，在这里是00401000，它同时也是EIP的值，此时EIP = 00401000

第二列表示的是OpCode，第三列表示的是mnemonic，相信不必多说，读者也能明白它们的意思：90对应NOP

由于EIP = 00401000，所以CPU会知道当前的指令应该是从内存单元中的00401000开始，在这里，储存了一个OpCode：90，接下来CPU会对90进行解码：
`OpCode：90  域格式：{code}`
只有1个字节。所以CPU就会知道，OpCode“90”是从内存地址“00401000”开始，到“00401001”结束。


----


在 1 个字节的空间里：00 - FF，Prefix 与 Opcode 共同占用这个空间。

由于 x86/x64 是 CISC 架构，指令不定长。解码器解码的唯一途径就是按指令编码的序列进行解码，关键是第 1 字节是什么？ 如：遇到 66h，它就是 prefix，遇到 89h，它就是 Opcode。 

> Prefix 与 Opcode 共享空间的原因是：Prefix 是可选的。在编码序列里，只有 Opcode 是不可缺少的，其它都是可选。这就决定了指令编码中的第 1 个字节对解码工作的重要性。

除了 1 个字节的 Opcode 外，还有 2 个字节的 Opcode 以及 3 个字节的 Opcode，第 2 个 Opcode 码是由 0F 字节进行引导，这个 0F 被称为 escape prefix（escape opcode）即：2 个字节的 Opcode 码，其第 1 个 Opcode 必定是 0F 字节。

##escape opcode

x86/x64 平台上的 3 个字节的 Opcode 码是通过 escape opcode + opcode 形式。

这些 escape opcode 可以理解为：opcode 的 prefix，这些 prefix 可以说是 opcode 的一部分。 

这些 escape opcode 是：
1. 0F
1. 0F 3A
1. 0F 38

##SIMD prefix



























