
#引论
软件总存在缺陷。只有通过测试，才可以发现软件缺陷。也只有发现了缺陷，才可以将软件缺陷从软件产品或软件系统中清理出去  

##软件测试学科的发展:
1. 1957～1978年，以功能验证为导向，测试是证明软件是正确的（正向思维）。
1. 1978～1983年，以破坏性检测为导向，测试是为了找到软件中的错误（逆向思维）。
1. 1983～1987年，以质量评估为导向，测试是提供产品的评估和质量度量。
1. 1988年起，以缺陷预防为导向，测试是为了展示软件符合设计要求，发现缺陷、预防缺陷。

**阶段划分:**
1. 初级阶段（1957～1971）测试通常被认为是对产品进行事后检验 ，缺乏有效的测试方法
1. 发展阶段（1972～1982），1972年第一次关于软件测试的正式会议，促进了软件测试的发展 
1. 成熟阶段（1983到现在），国际标准Std 829-1983 ，形成一门独立的学科和专业，成为软件工程学科中的一个重要组成部分 

**软件测试的正面性:**
* 软件测试就是为程序能够按预期设想那样运行而建立足够的信心。
* “软件测试是一系列活动以评价一个程序或系统的特性或能力并确定是否达到预期的结果”
* 测试是为了验证软件是否符合用户需求，即验证软件产品是否能正常工作

> 在设计规定的环境下运行软件的所有功能，直至全部通过

**软件测试的反面性:**
* 测试是为了证明程序有错，而不是证明程序无错误
* 一个好的测试用例是在于它能发现至今未发现的错误 
* 一个成功的测试是发现了至今未发现的错误的测试

> 寻找容易犯错误的地方和系统的薄弱环节，试图破坏系统，直至找不出问题


##软件测试的定义:

1. IEEE定义:

    * 在特定的条件下运行系统或构件，观察或记录结果，对系统的某个方面做出评价 
    *分析某个软件项以发现现存的和要求的条件之差别（即错误）并评价此软件项的特性

1. ISO29119

    Testing is comparing what the test item does with what it is expected to do

1. 更完整的定义

    软件测试是由“验证（Verification）”和“有效性确认（Validation）”活动构成的整体

1. 其他
    
    1. 软件测试被认为是对软件系统中潜在的各种风险进行评估的活动
    1. 测试的经济观点就是以最小的代价获得最高的软件产品质量:测试的成本< 缺陷造成的损失
    

##测试驱动开发
1. 开始
1. 为新性能写一个测试
1. 编译
1. 修订编译错误
1. 运行测试并发现错误
1. 编写代码
1. 运行测试并通过
1. 如果需要进行重构


----


#软件测试基本概念

##软件缺陷
> 缺陷是质量的对立面  

###软件质量

* 软件质量: 软件产品具有满足规定的或隐含要求能力要求有关的特征与特征总和
* 软件质量：软件产品满足使用要求的程度

**产品质量的标准:**
- 功能性 Functionality
- 可用性 Usability
- 可靠性 Reliability 
- 性能 Performance
- 容量 Capacity
- 可伸缩性 Scalability
- 可维护性 Service manageability
- 兼容性 Compatibility
- 可扩展性 Extensibility

**软件质量特征:**
* 功能：与一组功能及其指定性质有关的一组属性，这里的功能是满足明确或隐含的需求的那些功能。
* 可靠：在规定的一段时间和条件下，与软件维持其性能水平的能力有关的一组属性。
* 易用：由一组规定或潜在的用户为使用软件所需作的努力和所作的评价有关的一组属性。
* 效率：与在规定条件下软件的性能水平与所使用资源量之间关系有关的一组属性。
* 可维护：与进行指定的修改所需的努力有关的一组属性。
* 可移植：与软件从一个环境转移到另一个环境的能力有关的一组属性。

###软件缺陷
任何程序、系统中的问题，和产品设计书的不一致性，不能满足用户的需求  

IEEE (1983) 729 软件缺陷一个标准的定义：
* 从产品内部看，软件缺陷是软件产品开发或维护过程中所存在的错误、毛病等各种问题；
* 从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。 

##验证与确认
> Verification：Are we building the product right？
> Validation： Are we building the right product? 

###评审
> 评审是对软件元素或者项目状态的一种评估手段，以确定其是否与计划的结果保持一致，并使其得到改进

**评审的形式/方法:**
* 互为评审 (Peer review)
* 轮查 (Passround)
* 走查 (walk-through)
* 会议评审 (Inspection)

**评审分类:**

* 管理评审
* 技术评审
* 文档评审
* 流程评审

###SQA 软件质量保证
软件质量保证是通过对软件产品和活动有计划的进行评审和审计来验证软件是否合乎标准的系统工程活动

**SQA活动:**
* 技术方法的应用
* 正式技术评审的实施
* 软件测试
* 标准的执行
* 修改的控制
* 度量
* 质量记录和记录保存

###SQA与软件测试关系
* SQA 是管理工作、审查对象是流程、强调以预防为主
* 测试是技术工作、测试对象是产品、主要是以事后检查

##软件测试的分类
1. 测试阶段或层次

    1. 单元测试
    1. 系统测试
    1. 验收测试
    1. 集成测试

1. 目标/特性

    1. 性能测试
    1. 强壮性测试
    1. 功能测试
    1. 适用性测试
    1. 可靠性测试
    1. 安全性测试
    
1. 方法

    1. 白盒测试
    1. 黑盒测试

1. 测试过程中被测软件是否被执行

    1. 动态测试
    1. 静态测试

###软件测试阶段

1. 需求分析  

    输入:需求定义, 市场分析文档, 相关技术文档
    输出:市场需求分析会议记要 , 功能设计, 技术设计

1. 设计审查   

    输入:市场需求文档, 技术设计文档   
    输出:测试计划, 测试用例

1. 功能验证  

    输入:代码完成文件包,功能详细设计说明书,最终技术文档
    输出:完整测试用例,完备的测试计划, 缺陷报告,功能验证测试报告

1. 系统测试 

    输入:代码修改后的文件包,完整测试用例,完备的测试计划 
    输出:缺陷报告,缺陷状态报告,项目阶段报告

1. 确认测试 

    输入:代码冻结文件包,确认测试用例
    输出:缺陷状态报告,缺陷报告审查,版本审查

1. 版本发布   

    输入:代码发布文件包,测试计划检查清单
    输出:当前版本已知问题的清单,版本发布报告


1. 需求和设计审查:检查需求,说明书对产品描述的准确性、一致性等，检查系统设计的合理性和可测试性等
1. 单元测试针对程序系统中的最小单元---模块或组件进行测试,主要采用白盒测试方法
1. 集成测试，也称组装测试、联合测试，在单元测试的基础上，将模块按照设计要求组装起来同时进行测试
1. 功能测试是基于产品功能说明书，是在已知产品所应具有的功能,从用户角度来进行功能验证，以确认每个功能是否都能正常使用
1. 系统测试是将软件放在整个计算机环境下，包括软硬件平台、某些支持软件、数据和人员等，在实际运行环境下进行一系列的测试
1. 验收测试的目的是向未来的用户表明系统能够像预定要求那样工作，验证软件的功能和性能如同用户所合理期待的那样
1. 安装测试是指按照软件产品安装手册或相应的文档，在一个和用户使用该产品完全一样的环境中或相当于用户使用环境中，进行一步一步的安装操作性的测试 
1. Alpha testing is simulated or actual operational testing by potential users/customers or an independent test team at the developers' sitea form of internal acceptance testing
1. Beta testing comes after alpha testing. Versions of the software, known as beta versions, are released to a limited audience outside of the programming team. 

##软件测试的工作范畴
* 软件测试工作的组织与管理：制定测试策略、测试计划，确认所采用的测试方法与规范，控制测试进度，管理测试资源。
* 测试工作的实施：编制符合标准的测试文档，搭建测试环境，开发测试脚本、与开发组织协作实现各阶段的测试活动  


------


#软件测试的方法
软件测试的方法论来源于软件工程的方法论，例如有面向对象的开发方法，就有面向对象的测试方法；有敏捷方法，就有和敏捷方法对应的敏捷测试  

##白盒测试方法

* 逻辑覆盖：以程序的内部逻辑结构为基础，分为语句覆盖、判定覆盖、判定-条件覆盖、条件组合覆盖等
* 基本路径测试：在程序控制流程的基础上，分析控制构造的环路复杂性，导出基本可执行路径集合，从而设计测试用例。

###语句覆盖
语句覆盖法的基本思想是设计若干测试用例，运行被测程序，使程序中的每个可执行语句至少被执行一次  

###判定覆盖/分支覆盖
判定覆盖法的基本思想是设计若干用例，运行被测程序，使得程序中每个判断的取真分支和取假分支至少经历一次，即判断真假值均曾被满足

###条件覆盖
条件覆盖的基本思想是设计若干测试用例，执行被测程序以后，要使每个判断中每个条件的可能取值至少满足一次

###判定条件覆盖
判定-条件覆盖是判定和条件覆盖设计方法的交集，即设计足够的测试用例，使得判断条件中的所有条件可能取值至少执行一次，同时，所有判断的可能结果至少执行一次  

###条件组合测试(MCC)
条件组合覆盖的基本思想是设计足够的测试用例，使得判断中每个条件的所有可能至少出现一次，并且每个判断本身的判定结果也至少出现一次  
> 它与条件覆盖的差别是它不是简单地要求每个条件都出现“真”与“假”两种结果，而是要求*让这些结果的所有可能组合都至少出现一次*

**问题:**
* 条件组合效率不高，有些测试是不必要的
* 判定/条件 还不够强 

###修正条件/判定覆盖(MC/DC)
1. 每个判定的所有可能结果至少能取值一次；
1. 判定中的每个条件的所有可能结果至少取值一次；
1. **一个判定中的每个条件曾经独立地对判定的结果产生影响；**
1. 每个入口和出口至少执行一次

###路径测试
路径覆盖就是设计所有的测试用例，来覆盖程序中的所有可能的执行路径

###基本路径测试
1. 依据代码绘制流程图
2. 确定流程图的圈复杂度（cyclomatic complexity ）
3. 确定线性独立路径的基本集合( basis set )
4. 设计测试用例覆盖每条基本路径

**定义:**  
> 圈复杂度（Cyclomatic complexity）:代码逻辑复杂度的 度量，提供了被测代码的路径数量。复杂度越高，出错的概率越大
* V(G) = 区域数量(由节点、连线包围的区域，包括图形外部区域)
* V(G) = 连线数量 - 节点数量 + 2
* V(G) = 简单可预测节点数量 + 1



* 独立路径： 至少引入一系列新的处理语句或条件的任何路径
* 基本集： 由独立路径构成的集合
* 由基本集导出的测试用例，保证每行代码语句至少被执行一次
* 基本集合不一定唯一

> 基本路径测试并不是测试所有路径的组合，仅仅保证每条基本路径被执行一次

###循环测试
1. 简单循环
1. 嵌套循环

    由内到外对循环进行测试

1. 串行连接循环

    * 独立循环 可以分别看着简单循环测试
    * 依赖性循环 可以看着是嵌套循环
    
1. 其他非结构循环

##黑盒测试

###等价类划分方法
将程序可能的输入数据分成若干个子集，从每个子集选取一个代表性的数据作为测试用例，等价类是某个输入域的子集，在该子集中每个输入数据的作用是等效的  
> 分为有效等价类和无效等价类。有效等价类是有意义的、合理的输入数据，可检查程序是否实现了规格说明中所规定的功能和性能。无效等价类与有效等价类的意义相反

1. 建立等价类表，列出所有划分出的等价类：
1. 为每个等价类规定一个唯一的编号；
1. 设计一个新的测试用例，使其尽可能多地覆盖尚未覆盖的有效等价类
1. 重复c)，最后使得所有有效等价类均被测试用例所覆盖；
1. 设计一个新的测试用例，使其只覆盖一个无效等价类。
1. 重复e)使所有无效等价类均被覆盖。

###边界值分析方法(BVA)
程序的很多错误发生在输入或输出范围的边界上，因此针对各种边界情况设置测试用例，可以发现不少程序缺陷  

**设计方法：**
1. 确定边界情况（输入或输出等价类的边界）
1. 选取正好等于、刚刚大于或刚刚小于边界值作为测试数据

###判定表方法
一个判定表由“条件和活动”两部分组成，也就是列出了一个测试活动执行所需的条件组合，所有可能的条件组合定义了一系列的选择，而测试活动需要考虑每一个选择    

**判定表元素:**
* 条件桩，列出问题的所有条件
* 动作桩：列出可能针对问题所采取的操作
* 条件项：针对所列条件的具体赋值
* 动作项：列出在条件项（各种取值）组合情况下应该采取的动作。
* 规则：任何一个条件组合的特定取值及其相应要执行的操作。

1. 规则：任何一个条件组合的特定取值及其相应要执行的操作称为规则。在判定表中贯穿条件项和动作项的一列就是一条规则。显然,判定表中列出多少组条件取值,也就有多少条规则,既条件项和动作项有多少列。
2. 化简：就是规则合并有两条或多条规则具有相同的动作，并且其条件项之间存在着极为相似的关系。

###因果图法
多种输入条件的组合，产生多种结果设计测试用例  

**设计方法：**  
* 分析软件规格说明文档描述的哪些是原因（输入条件），哪些是结果（输出条件），给每个原因和结果赋予一个标示符。
* 找出原因与结果，原因与原因之间的对应关系，划出因果图
* 在因果图上标上哪些不可能发生的因果关系，表明约束或限制条件
* 根据因果图，创建判定表，将复杂的逻辑关系和多种条件组合很具体明确的表示出来
* 把判定表的每一行作为依据设计测试用例。

**因果图的基本符号:**
**关系:**  
1. 恒等-关系：果 j 取决于因 i。因出现，则果也出现。
1. 非-关系：只有当因 i 不存在时，果 j 才出现
1. 或-关系：如果因 i
1. 与-关系

**约束:**  
输入条件的约束有以下4类：  

1. E约束（异）：a和b中至多有一个可能为1，即a和b不能同时为1。
1. I约束（或）：a、b和c中至少有一个必须是1，即 a、b 和c不能同时为0。
1. O约束（唯一）；a和b必须有一个，且仅有1个为1。
1. R约束（要求）：a是1时，b必须是1，即不可能a是1时b是0。

输出条件的约束只有M约束（强制）：若结果a是1，则结果b强制为0。

###正交实验法
1. 确定影响功能的因子与状态
1. 选择一个合适的正交表
1. 利用正交表构造测试数据集

###功能图法
每个程序的功能通常由静态说明和动态说明组成:  
1. 静态说明描述了输入条件和输出条件之间的对应关系
1. 动态说明描述了输入数据的次序或者转移的次序
> 功能图法就是为了解决动态说明问题的一种测试用例的设计方法 

1. 从功能逻辑模型（决策表或因果图）导出局部测试用例，覆盖各个状态的各种输入数据的组合
1. 从状态迁移图导出整体的测试用例，以覆盖系统（程序）控制的逻辑路径

> 从功能逻辑模型（决策表或因果图）导出局部测试用例，覆盖各个状态的各种输入数据的组合从状态迁移图导出整体的测试用例，以覆盖系统（程序）控制的逻辑路径  

####状态迁移图(STD)
状态迁移图，描述系统状态变化的动态信息——动态说明，由状态和迁移来描述，状态指出数据输入的位置（或时间），而迁移则指明状态的改变  

###错误推测法
基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性地设计测试用例。  

##探索式测试(EST Exploratory software testing)
* Specific（具体的）：测试需要一个具体的目标。
* Measurable（可度量的）：有明确的度量可以评估目标是否达成。
* Achievable（可实现的）：当前的目标应该是可实现的
* Relevant（相关的）：目标要切合当前语境，符合团队利益，且不忘企业愿景
* Time-boxed（有时间限制的）：为每个目标设定一个合理的最后期限。这是帮助测试人员在固定的时间窗口（time window）中排除不相关干扰、专注工作

##静态测试和动态测试
* 静态测试包括对软件产品的需求和设计规格说明书的评审、对程序代码的复审等
* 动态测试是通过真正运行程序发现错误，通过观察代码运行过程，来获取系统信息，对系统行为进行验证

##主动测试和被动测试
* 主动测试方法：测试人员主动向被测试对象发送请求、或借助数据、事件驱动被测试对象的行为，从而验证被测试对象的反应或输出结果
* 被动测试方法：测试人员不干预产品的运行，而是被动地监控产品在实际环境中运行，通过一定的被动机制来获得系统运行的数据，包括输入、输出数据

##形式化测试方法

###形式化方法
凡是采用严格的数学语言、具有精确的数学语义的方法，都称为形式化方法。形式化规范说明语言，一般由3个主要的成分构成：语法、语义和一组关系  

###形式化验证
形式化验证，就是根据某些形式规范或属性，使用形式逻辑方法证明其正确性或非正确性。

##基于模型的软件测试(MBT)
基于模型的测试（Model-based testing，MBT）是利用模型来生成相应的测试用例，然后根据实际结果和原先预想的结果的差异来测试系统  
先从概念上形成模型，然后试图用数学的方法来描述这个模型，形成仿真模型，完成所需的测试  

##扩展有限状态机方法
有限状态机（ Finite State Machine ，FSM）是对象行为建模的工具，以描述对象在其生命周期内所经历的状态序列，以及如何响应来自外界的各种事件

##基于风险的测试
基于风险的测试是指评估测试的优先级，先做高优先级的测试，如果时间或精力不够，低优先级的测试可以暂时先不做  
> 软件产品的风险度可以通过**出错的影响程度**和**出现的概率**来计算

##模糊测试方法
模糊测试（Fuzz testing）方法，简单的说，就是构造大量的随机数据作为系统的输入，从而检验系统在各种数据情况下是否会出现问题  
模糊测试方法可模拟黑客对系统发动攻击测试，完成安全性测试，并能应用于服务器的容错性测试  

##ALAC测试和随机测试方法
ALAC，是Act-like-a-customer（象客户那样做）的简写，ALAC测试方法是一种基于客户使用产品的知识开发出来的测试方法，它的出发点是著名的Pareto 80/20规律  


-----


#软件测试依据和规范

##测试过程模型

##软件过程模型 
1. 瀑布模型
1. 原型模型
1. (RAD)V模型
1.  改进的V模型
1. 螺旋模型
1. 增量模型和迭代模型
1. 构件组装模型
1. 并发模型
1. XP模型 

##V模型
* 需求功能设计:验收测试
* 系统/软件设计:系统测试
* 详细设计:功能测试
* 编码:单元测试

##W模型
1. 需求分析定义:测试目标
1. 系统/结构设计:测试计划&系统测试用例设计和环境
1. 详细或程序设计:功能测试用例设计
1. 编码及单元测试:代码审查,单元测试
1. 缺陷修正:功能测试
1. 缺陷修正:系统测试
1. 缺陷修正:验收测试

##TMap(Test Management Approach)
TMap (Test Management Approach，测试管理方法)是一种结构化的、基于风险策略的测试方法体系, 目的能更早地发现缺陷，以最小的成本、有效地、彻底地完成测试任务，以减少软件发布后的支持成本  
TMap所定义的测试生命周期由计划和控制、准备、说明、执行和完成等阶段组成   

###TMap三大基石 
* 与软件开发生命周期一致的测试活动生命周期（L）；
* 坚实的组织融合（O）
* 正确的基础设施和工具（I）
* 可用的技术（T）

###TMap NEXT
* 一个基于风险的测试方法
* 基于风险的测试策略，来有效的分配测试投入
* 在测试规划的各个时间点进行商业投入 

##测试过程改进模型 

###TMM 
过程能力描述了遵循一个软件测试过程可能达到的预期结果的范围

*TMM的建立，得益于以下3点：*

* 充分吸收、CMM的精华；
* 基于历史演化的测试过程；
* 业界的最佳实践。

1. 初识级
1. 定义级
1. 集成级
1. 管理&度量
1. 优化

###TPI
基于连续性表示法的测试过程改进的参考模型,是在软件控制、测试知识以及过往经验的基础上开发出来的  

TPI提供了20个关键域,每个关键域有四个级别,A-D,A为最低级别

**TPI检查点和建议:**
为了能客观地决定各个关键域的级别，TPI模型提供了一种度量工具——检查点。每个级别都有若干个检查点，测试过程只有在满足了这些检查点的要求之后，才意味着它达到了特定的级别   
检查点帮助我们发现测试过程中的问题，而建议会帮助我们解决问题，最终改进测试过程。建议不仅包含对如何达到下个级别的指导，而且还包括一些具体的操作技巧、注意事项等。  

**TPI成熟度矩阵:**
测试成熟度矩阵提供了关键域各个等级(A/B/C/D)和总体测试过程成熟度登记的映射关系

####TPI NEXT
1. 商业驱动作为测试过程提升的基础
1. 为改进目标和度量设定优先级
1. 确保商业可以引导和控制改进的过程 

###CTP
关键测试过程(Critical Test Process,CTP)评估模型主要是一个内容参考模型,一个上下文相关的方法,并能对模型进行剪裁,包括:

* 特殊挑战的识别
* 优秀过程属性的识别
* 过程改进实施顺勋和重要性的选择

**4P:**  
> 4P关键过程可分成实践和管理两个部分.计划和完善主要是管理工作,准备和执行是时间工作,**强调在早起几乎阿和准备阶段投入大量的时间和精力**  

1. Plan
1. Prepare
1. Perform
1. Perfect

CTP识别了12个子关键测试过程,通过实施这些关键过程,来改进测试过程  

####STEP
STEP(Systematic Test and Evaluation Process,系统化测试和评估过程)是一个内容参考模型,认定测试是一个生命周期活动,在明确需求后开始直到系统退役  
STEP的实现途径是使用基于需求的测试方针以保证在设计和编码以前,已经设计了测试用例以验证需求规格说明.  

该方法识别并关注了测试中的3个主要阶段:
1. 计划
1. 获得测试件
1. 度量

##软件测试标准和规范
1. 国际标准
1. 国家标准
1. 行业标准
1. 企业标准
1. 项目标准

###ISO/GB软件质量体系标准
1. 合同评审
1. 需方需求规格说明
1. 开发计划
1. 质量计划
1. 设计和实现
1. 测试和确认
1. 验收
1. 复制、交付和安装
1. 维护

###软件测试规范
1. 角色确定
1. 进入的准则
1. 输入项
1. 活动过程
1. 输出项
1. 验证与确认
1. 推出的准则
1. 度量


------


#单元测试
被测试的一个单元能够实现一个特定的功能,并和其他单元有明确的接口定义,这样可以与其他单元隔离开  
> 单元测试和编码是同步进行，但在TDD中，强调测试在先，编码在后。单元测试一般由开发人员完成,QA人员辅助.
> 单元测试活动中,强调被测试对象的独立性,软件的独立单元将与程序的其他部分被隔离开,来避免其他单元对该单元的影响

##目标
对单元的代码规范性、正确性、安全性、性能进行验证

##任务
1. 单元中所有独立执行路径测试

    基本路径测试和循环测试是最常用且最有效的测试技术

1. 单元局部数据结构测试
1. 单元接口测试
1. 单元边界条件测试
1. 单元的各条错误处理通路测试
1. 内存分析

##静态测试
静态测试通常在代码完成并无错误地通过编译或汇编后进行,采用工具扫描分析,代码评审等方法  

* 互查（Peer Review）
* 走查 （Walk Through）
* 评审 （ Inspection ）


###编码的标准和规范
1. 可靠性
1. 可读性和维护性
1. 移植性

###代码评审
1. 代码走查

    定义：采用讲解、讨论和模拟运行的方式进行的查找错误的活动
    
1. 正式会议审查
1. 检查表

    把程序设计中可能发生的各种缺陷进行分类,以每一类别举尽可能多的典型缺陷,然后支撑表格,以供会议中使用

##驱动程序与桩程序
1. 驱动模块（drive）:对底层或子层模块进行测试所编写的调用这些模块的程序。
1. 桩模块（stub）：对顶层或上层模块进行测试时所编写的替代下层模块的程序

##调试与评估
调试与测试的对象及采用的方法有很大程度上的相似，调试还用到断点控制等排错方法，但其目的却完全不同。测试是为了找出软件中存在的缺陷，而调试是为了解决存在的缺陷。  

##单元测试的管理
1. 在详细设计阶段完成单元测试计划。 
2. 建立单元测试环境，完成测试设计和开发。 
3. 执行单元测试用例，并且详细记录测试结果。 
4. 判定测试用例是否通过。 
5. 提交《单元测试报告》

##单元测试的文档
1. 需求/详细设计Spec-&gt;《单元测试计划》-&gt;《单元测试用例》-&gt;《缺陷跟踪报告》
2. 丰富《缺陷检查表》 
3. 丰富《单元测试检查表》 
4. 评估《单元测试报告》 

##单元测试工具种类
* 代码规则/风格检查工具
* 内存资源泄漏检查工具
* 代码覆盖率检查工具
* 代码性能检查工具


-----


#集成测试和系统测试

##系统集成的模式与方法  

###集成测试前的准备

* 人员安排
* 测试计划
* 测试内容
* 集成模式
* 测试方法

###集成测试的模式
* 非渐增式测试模式：先分别测试每个模块，再把所有模块按设计要求放在一起结合成所要的程序，如大棒模式。
* 渐增式测试模式：把下一个要测试的模块同已经测试好的模块结合起来进行测试，测试完以后再把下一个应该测试的模块结合进来测试。

###集成测试的方法
* 自顶向下
* 自底向上
* 混合策略
* 大棒集成方法

    采用大棒集成方法,先是对每一个子模块进行测试（单元测试阶段），
    然后将所有模块一次性的全部集成起来进行集成测试 。
    
* 三明治方法

    优点是：它将自顶向下和自底向上的集成方法有机地结合起来，不需要写桩程序因为在测试初自底向上集成已经验证了底层模块的正确性。
    缺点是：在真正集成之前每一个独立的模块没有完全测试过。 

* 改进的三明治方法

    改进的三明治集成方法，不仅自两头向中间集成，而且保证每个模块得到单独的测试，使测试进行得比较彻底 。 

###持续集成
> 通常系统集成都会采用持续集成的策略，软件开发中各个模块不是同时完成，根据进度将完成的模块尽可能早的进行集成，有助于尽早发现Bug，避免集成中大量Bug涌现

##功能测试

###要点
* 功能逻辑清楚，符合使用者习惯
* 系统的各种状态按照业务流程而变化，并保持稳定
* 每项功能符合实际要求
> 客户需求为导向，全面理解功能特性  

##回归测试

###目的
* 所做的修改达到了预定的目的，如错误得到了改正，新功能得到了实现，能够适应新的运行环境等；
* 不影响软件原有功能的正确性。

###回归测试的方法
* 再测试全部用例 
* 基于风险选择测试 
* 基于操作剖面选择测试 
* 再测试修改的部分 

##非功能性测试

###性能测试

性能测试（performance test）就是为了发现系统性能问题或获取系统性能相关指标而进行的测试。  
> 一般在**真实环境**、**特定负载**条件下，通过**工具模拟**实际软件系统的运行及其操作，同时监控性能各项指标，最后对测试结果进行分析来确定系统的性能状况。

####目的： 
为了验证系统是否达到用户提出的性能指标，同时发现系统中存在的性能瓶颈，优化系统的性能
####性能测试需求：
用户对各项指标提出的明确需求；如果用户没有提出性能指标，则根据用户需求、测试设计人员的经验来设计各项测试指标。（需求+经验）
####主要的性能指标：
服务器的各项指标（CPU、内存占用率等）、后台数据库的各项指标、网络流量、响应时间

- 数据传输的吞吐量（Transactions）
- 数据处理效率（Transactions per second）
- 数据请求的响应时间（Response time）
- 内存和CPU使用率
- 连接时间（Connect Time）、发送时间（Sent Time）
- 处理时间（Process Time）、页面下载时间
- 第一次缓冲时间
- 每秒（SSL）连接数
- 每秒事务总数、每秒下载页面数
- 每秒点击次数、每秒HTTP 响应数
- 每秒重试次数

####性能测试类型
- 性能验证测试，验证系统是否达到事先已定义的系统性能指标、能否满足系统的性能需求
- 性能基准测试，在系统标准配置下获得有关的性能指标数据，作为将来性能改进的基准线
- 性能规划测试，在多种特定的环境下，获得不同配置的系统的性能指标，从而决定在系统部署时采用什么样的软、硬件配置
- 容量测试可以看作性能的测试一种，因为系统的容量可以看作是系统性能指标之一

####负载
* 每次请求发送的数据量 (Request Per Second, RPS)
* 并发连接数 (Simultaneous Connections) 
* 思考时间（thinking time），用户发出请求之间的间隔时间

> RPS + SC + Thinking Time = Concurrent users

####负载模型
1. 渐增(Ramp-up)
1. Flat

    一次加载所有的用户，然后在预定的时间段内持续运行,可以精确地获得系统的响应时间和吞吐量的平均值。

####场景设置
在性能测试执行前，以什么样方式启动负载方式、如何持续进行负载测试直至负载测试结束，这个过程的负载大小和方式、负载启动和结束以及各种检查点、验证点等设计，被称为场景设置。   

####确定性能需求
比如:响应时间是用户的关注点，容量和数据吞吐量是（产品市场团队）业务处理方面的关注点，而系统资源占用率是开发团队的技术关注点   

####性能测试过程
- 确定所要模拟的角色及其对应的关键业务操作路径
- 确定输入/输出参数。
- 准备测试环境，并完成相应的测试脚本的开发。
- 设计具体的测试场景，如负载水平、加载方式等。
- 执行测试，监控输出参数，如数据吞吐量、响应时间、资源占有率等。
- 对测试结果进行分析。
- 结果不满意，需要调整测试场景，进入下一个循环

####结果分析
> 要善于捕捉被监控的数据曲线发生突变的地方——拐点 
> 性能测试的重点在于前期数据的设计与后期数据的分析。

###压力测试
压力测试是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。   

* 并发性能测试
* 疲劳强度测试
* 大数据量测试

####并发性能测试
考察客户端应用的性能，测试的入口是客户端并发性能测试的过程，是一个负载测试过程。即逐渐增加并发虚拟用户数负载，直到系统出现性能瓶颈或者崩溃为止。  

* 破坏性压力测试，通过不断加载的手段，快速造成系统的崩溃，让问题尽快地暴露出来  


####疲劳强度测试
通常是采用系统稳定运行情况下能够支持的最大并发用户数或者日常运行用户数，持续长时间运行，以发现性能问题。   

* 渗入测试（soak test），通过长时间运行，使问题逐渐渗透出来，从而发现内存泄漏、垃圾收集（GC）或系统的其他问题，以检验系统的健壮性   
* 峰谷测试（peak-rest test），采用高低突变加载方式进行，先加载到高水平的负载，然后急剧降低负载，稍微平息一段时间，再加载到高水平的负载，重复这样过程，容易发现问题的蛛丝马迹，最终找到问题的根源  

####大数据测试
* 独立的数据量测试,针对某些系统存储、传输、统计、查询等业务进行大数据量测试  
* 综合数据量测试, 和压力性能测试、负载性能测试、并发性能测试、疲劳性能测试相结合的综合测试方案 


###容量测试
通过测试确定测试对象在给定时间内能够持续处理的最大负载量，即反映软件系统应用特征的某项指标的极限值（如最大并发用户数、数据库记录数等），系统在其极限值状态下还能保持主要功能正常运行。   

> 查看现有系统中性能与负载间的关系，并确定出现响应时间显著延长的位置 “拐点”。可以确定是否需要增加资源以支持额外的用户。


###安全性测试
根据ISO 8402的定义，安全性是“使伤害或损害的风险限制在可接受的水平内”。  

软件安全性测试就是检验系统权限设置有效性、防范非法入侵的能力、数据备份和恢复能力等，设法找出上述各种安全性漏洞  

> 理论上讲，只要有足够的时间和资源，没有不可进入的系统。因此系统安全设计的准则是，使非法侵入的代价超过被保护信息的价值，此时非法侵入者已无利可图。

####安全性测试的范围

1. 系统级别的安全性
1. 应用程序级别的安全性 

###可靠性测试
可靠性（Reliability）是产品在规定的条件下和规定的时间内完成规定功能的能力，它的概率度量称为可靠度 

成熟性度量可以通过错误发现率DDP（Defect Detection Percentage）来表现。在测试中查找出来的错误越多，实际应用中出错的机会就越小，软件也就越成熟。   

####故障转移测试
Failover 测试:故障转移(Failover)和故障恢复(Failback).  

服务器的Failover测试的目的: 检查系统是否具备某种灾难性恢复的手段. 当系统局部或全部出错时, 能否在指定时间内修正错误. 具有良好故障恢复的系统, 当遇到软件原因或无法克服的自然原因时, 能够进行故障的转移与恢复. 使用户最低限度的感受到故障的发生.  

在服务器的Failover测试中, 将包括多种情况, 如:
* 客户机或服务器掉电; 
* 客户机与服务器网络中断; 
* 服务器相关的程序CRASH; 
* 系统中全部或部分CORE SERVER出现掉电/网络中断情况.

*Failover测试的方法和技巧:*  
1. 将测试系统全部对象描绘出来-系统结构图
2. 对图中的所有可能发生的故障点设计测试用例.


----


#验收测试
验收测试(Acceptance Test):在软件产品完成了功能测试和系统测试之后、产品发布之前所进行的软件测试活动它是技术测试的最后一个阶段,也称为交付测试。   

##验收测试的过程和主要内容
*前提:*  
系统或软件产品已通过了系统测试的软件系统。  

*测试内容:*    
验证系统是否达到了用户需求规格说明书（可能包括项目或产品验收准则）中的要求，测试尽可能地发现软件中存留的缺陷，从而为软件进一步改善提供帮助，并保证系统或软件产品最终被用户接受。主要包括易用性测试、兼容性测试、安装测试、文档（如用户手册、操作手册等）测试等几个方面的内容。   

*步骤:*  
1. 制定测试计划，测试项，测试策略及验收通过准则，并经过客户参与的计划评审。
1. 建立测试环境，设计测试用例，并经过评审。
1. 准备测试数据，执行测试用例，记录测试结果。
1. 分析测试结果，根据验收通过准则分析测试结果，作出验收是否通过及测试评价。

    1. 测试项目通过；
    1. 测试项目没有通过，并且不存在变通方法，需要很大的修改；
    1. 测试项目没有通过，但存在变通方法，在维护后期或下一个版本改进；
    1. 测试项目无法评估或者无法给出完整的评估。此时必须给出原因。如果是因为该测试项目没有说明清楚，应该修改测试计划。 

1. 提交测试报告

##验收标准和注意事项
*验收测试完成标准:*  

    1. 完全执行了验收测试计划中的每个测试用例。
    1. 在验收测试中发现的错误已经得到修改并且通过了测试或者经过评估留待下一版本中修改。 
    1. 完成软件验收测试报告。

*注意事项:*  

    1. 必须编写正式的、单独的验收测试报告
    1. 验收测试必须在**实际用户运行环境**中进行
    1. 由**用户和测试部门**共同执行。如公司自开发产品，应由测试人员，产品设计部门，市场部门等共同进行。

##产品规格说明书的验证
*产口规格说明书的审核:*
1. 从客户的角度和立场进行审核工作。
1. 检验套用标准的正确性，不要和行业规范相抵触。
1. 审查、研究同类产品。
1. 验证产品规格说明书的完整性、准确性、一致性、合理性等特性。

*产口规格说明书的验证:*
1. 已经实现的特性标识为通过。
1. 特性没有实现,报告bug并在报告中体现。
1. 特性基本实现,但与产品说明书内容不一致,报bug并在报告中体现。
1. 特性基本实现,但存在一些问题或错误。

##用户界面和可用性测试
用户界面的7个要素:
* 符合标准和规范。
* 直观性。
* 一致性。
* 灵活性。
* 舒适性。
* 正确性。
* 实用性。

###符合标准和规范
通常标准是已经确立的，多数用户已经熟悉并接受了这些标准和规范、或已经认同了这些信息所代表的意义。  

如果软件在某一个平台上运行，就需要把该平台的标准和规范作为产品规格说明书的补充内容，在建立测试案例时和产品规格说明书一样作为依据   

###直观性与一致性
*直观性：*
- 首先了解所需的功能或期待的响应应该明显，并在预期的地方出现。
- 其次要考虑用户界面的组织和布局是否合理。

*一致性：*
- 包括软件本身的一致性，以及软件与其他软件的一致性。

###灵活性
用户喜欢可以灵活选择的软件，软件可以选择不同的状态和方式，完成相应的功能。但灵活性也可能发展为复杂性，太多的状态和方式的选择增加的不仅仅是用户理解和掌握的困难程度    

###舒适性、正确性、实用性
*舒适性：*
- 恰当的表现、合理的安排、必要的提示或更正能力等是要考虑的因素，包括容错处理和性能。

*正确性：*
- 正确性的问题一般都很明显，比较容易发现。 

*实用性：*
- 实用性不是指的是软件本身是否实用，而仅仅指的是具体特性是否实用。大型软件的开发或周期较长经过几次反复的软件开发中容易产生一些没有实用性的功能。 

##兼容性测试
软件兼容性测试是指验证软件之间是否正确地交互和共享信息。   

> 注意：从项目管理的角度出发，使平台清单在满足客户要求的前提下尽可能的小是十分重要的，否则将会给编码和测试带来巨大的工作量

- 硬件兼容
- 软件之间兼容
- 数据之间兼容

###向前和向后兼容
- 向后兼容（向下兼容）是指可以使用软件的以前版本。
- 向前兼容（向上兼容）指的是可以使用软件的未来版本。 

###多版本的测试
一个庞大而又艰巨的任务，需要对所有可能的软件组合等价分配，验证软件之间正确交互的最小有效集合。

*通常我们的做法是：*
- 将软件分类。例如：字处理，电子表格，数据库，图形处理，游戏等。从每种类型中选择部分测试软件。
- 按软件的流行程度选择较流行的软件。
- 按年份，选取一定年份内的程序和版本。

###可安装性和可恢复性测试

*可安装性测试:*  
1. 安装
1. 卸载 
1. 升级

*可恢复性测试:*
* 检查系统的容错能力。当系统出错时，能否在指定时间内修正错误或重新启动系统
* 恢复测试首先要通过各种手段，让软件强制性地发生故障，然后验证系统是否能尽快恢复

    * 对于自动恢复需验证重新初始化、检查点、数据恢
复和重新启动等机制的正确性；
    * 对于人工干预的恢复系统，还需估测平均修复时间，
确定其是否在可接受的范围内。

###文档测试
好的文档能达到提高易用性、提高可靠性、降低技术支持的费用的目的，从而提高了产品的整体质量。   

*非代码的文档测试主要检查文档:*
- 正确性
- 完备性
- 可理解性

> 软件驱动的文档还得像程序一样运行起来测试。 

##验收测试报告和用户验收测试
* α测试: 开发公司组织内部人员模拟各类用户行对即将面市软件产品（称为α版本）进行测试，试图发现错误并修正  
> 经过α测试调整的软件产品称为β版本

* β测试：组织外部的典型用户在日常工作中实际使用β版本，并要求用户报告异常情况、反馈使用意见。然后软件开发公司再对β版本进行改错和完善  
> 验收测试报告，也称为发布报告（Release Report） 


----


#面向对象软件的测试  

##面向对象软件测试概述 
面向对象(object-oriented) = 对象 + 分类 + 继承 + 通信 

###分层与增量  
所有的用于C的基于规范的测试用例也都适用于D   

###面向对象层次结构测试重点 
* 认定的对象

    * 认定的对象是否全面
    * 认定的对象是否具有多个属性
    * 对认定为同一对象的实例是否有共同的、区别于其他实例的共同属性，是否提供或需要相同的服务
    * 如果系统没有必要始终保持对象代表的实例信息，提供或者得到关于它的服务，认定的对象也无必要
     
* 认定的分类结构

    * 处于高层的对象，是否在问题空间中含有不同于下一层对象的特殊可能性，即是否能派生出下一层对象?
    * 处于同一低层的对象，是否能抽象出在现实中有意义的更一般的上层对象？
    * 对所有认定的对象，是否能在问题空间内向上层抽象出在现实中有意义的对象？
    * 高层的对象的特性是否完全体现下层的共性，低层的对象是否有高层特性基础上的特殊性？

    > “或”关系、 “is a”关系实例的一般与特殊的关系 


* 认定的组装结构测试 

    * 整体（对象）和部件（对象）是否在考虑的问题空间中有实际应用，其组装关系是否符合现实的关系。
    * 整体（对象）中是否遗漏了反映在问题空间中的有用部件（对象）。
    * 部件（对象）是否能够在空间中组装新的有现实意义的整体（对象）。

    > 与”关系、 “has a”关系实例的整体与局部的关系 

* 构造的类层次结构

    * 类层次结构是否涵盖了所有定义的类？
    * 是否能体现所定义的实例关联、消息关联？
    * 子类是否具有父类没有的新特性？
    * 子类间的共同特性是否完全在父类中得以体现？

    > 类层次结构：基于OOA中产生的分类结构的原则来组织，着重体现父类和子类间的一般性和特殊性 

##面向对象的单元测试 
*类测试的方法:*  
* 代码检查
* 设计测试用例有效地执行测试 

*类测试的组成部分:*  
* 类在系统中的作用，尤其是与之相关联的风险程度。
* 类的复杂性（根据状态个数、操作个数以及关联其他类的程度等进行衡量）
* 开发这个类测试驱动程序所需的工作量。 

###构建测试用例 
从类说明中确定测试用例根据类实现引进的边界值来扩充附加的测试用例

*根据前置/后置条件来构建测试用例的总体思想是：*   
- 为所有可能出现的组合情况确定测试用例需求
- 创建测试用例来表达这些需求、包括特定输入值（包括常见值和边界值），并确定它们的正确输出
- 增加测试用例来阐述违反前置条件所发生的情况  

*类测试系列的充分性:*    
* 基于状态的覆盖率，测试覆盖了多少个状态转换为依据 
* 基于约束的覆盖率，有多少对前置/后置条件被覆盖
* 基于代码的覆盖率。当所有的测试用例都执行结束时，确定实现一个类的每一行代码或代码通过的每一条路径至少执行了一次 

##面向对象的集成测试     
* 类的线性测试，交互测试
* 类的独立性（跨平台方面）测试
* 分布式对象测试

> 交互测试的重点是确保对象之间的消息传送能够正确进行 

###对象交互性测试 
1. 汇集类测试：可以使用测试原始类的方法来测试汇集类，创建一些实例，确保实例作为消息中的参数被传递给正在测试的集合：   

    * 存放这些对象的引用（对象之间一对多的关系）
    * 创建、删除这些对象的实例

1. 协作类测试： 集中测试对象之间调用关系，包括对象在被使用过程中属性是否按定义的要求被正确使用、或被修改

###分布式对象测试  
> OOP通过隐藏接口的属性或在某些情况下使线程对对象做出反应，以此提供一些简单的同步手段。
测试过程中，不能因为在一个特定执行中没有发生错误就肯定缺陷被消除了，而是引导我们使用下列技术之一：   

* 在类的层次上进行更彻底的测试。 
* 在记录事件发生顺序的同时，执行大量的测试用例。 
* 指定标准的测试环境 

##基于客户角度的Java 测试 
比如:空指针保护,格式化数字错误字符串或数组越界

##基于程序角度的Java测试 

###Action层的单元测试 (mork StrutsTestCase)

    Mork就是模型，模拟被测试对象关联的对象及测试数据   
    StrutsTestCase 是Junit TestCase类的扩展，提供基于Struts框架的代码测试   

###Biz逻辑事务层的单元测试 (DbUnit)
    
    有效的单元测试必须隔离测试对象和外部依赖，以便管理测试对象的状态和行为。  
    DbUnit是为数据库驱动、对JUnit 扩展的解决方法   
    使用DbUnit，开发人员可以控制测试数据库的状态，包括准备好初始化数据以及将数据库状态恢复到测试前的状态  

###Servlet的单元测试 (httpUnit)

    HttpUnit 可提供一个模拟的Servlet容器，让Servlet代码不需要发布到Servlet容器（如tomcat）就可以直接测试
    
###流行框架Struts+Spring+Hibernate的测试 

    * Spring的测试机制 
    * 用Spring Mock对Spring进行单元测试 
    * 用HSQLDB对Hibernate进行单元测试   



-----


#基于应用服务器的测试 

##基于Web服务器应用的测试

1. Web服务器功能测试
1. Web安全性测试
1. Web性能测试

    * 在线用户数和响应时间来度量系统性能
    * 系统吞吐量和响应时间来度量系统性能
    * Web服务器资源利用率

    > 在执行客户端并发性能测试的过程中，需要同时监控数据库服务器、Web服务器以及网络资源等使用情况，以便对系统的性能做全面评估 
    > 录制脚本和手工编写脚本相结合
    > 设置数据池，实现变量加载业务
    > 批量执行
    
1. 性能测试工具Flood

##基于数据库应用服务器的测试

###数据库服务器性能测试

    * 大数据量测试：10万、100万、千万条记录
    * 大容量测试：某些字段存储10M、100M、1G等大体积数据。

> Oracle数据库性能测试

> *Oracle系统性能测试的目标:*
> 1. 模拟数据库系统的数据负载,操作,侦测和获取性能测试数据, 帮助开发和DBA来优化和调整数据库或者应用程序.
> 1. 最终的结果是获取更快的数据库响应速度或者更高吞度能力.

*数据库服务器典型性能问题:*
1.单一类型事务响应时间过长 
    
    * 数据库服务器负载 
    * 糟糕的数据库设计 
    * 事务粒度过大 
    * 批任务对普通用户性能的影响 

1. 并发处理能力差 
1.锁冲突严重 

    * 资源锁定造成的数据库事务超时 
    * 数据库死锁  

*数据库性能问题的一般解决办法:*   
* 监视性能相关数据；
* 定位资源占用较大的事务并做出必要的优化或调整；
* 定位锁冲突，修改锁冲突发生严重的应用逻辑；
* 对规模较大的数据或者无法通过一般优化解决的锁冲突进行分布。


###数据库并发控制测试
> 数据库并发能力: 多个应用请求的并发处理过程  

*并发主要考虑的几个方面:*  

* 数据丢失
* 不可重复数据
* 读脏数据
* 数据库的锁

*并发测试的设计过程:*  

* 并发流程分析
* 并发控制测试设计

##基于Java EE应用服务器的测试

###JProfiler应用服务器的性能测试 
JProfiler能实时地监控系统的CPU、内存、线程、JVM（Java虚拟机）等运行或性能的动态状况，可以找到性能瓶颈、内存泄漏等问题，并通过堆遍历作资源回收器的根源性分析。  

> JProfilerr提供不同的方法来记录访问树以优化性能和细节，在视图中可以灵活选择线程或者线程组，而所有的视图可以聚集到方法、类、包或组件等不同层次上
 
###Java weblogic应用服务器性能测试 



-----


#软件本地化测试

##什么是软件本地化

###软件本地化与国际化
* 软件国际化（SW Internationalization，I18N）

    I18N是在软件设计和文档开发过程中，使得功能和代码设计能处理多种语言和文化传统，使创建不同语言版本时，不需要重新设计源程序代码的软件工程方法

* 软件本地化（SW Localization，L10N）

    L10N是将一个软件产品按特定国家/地区或语言市场的需要进行加工，使之满足特定市场上的用户对语言和文化的特殊要求的软件生产活动。

> G11N = I18N + L10N
> I18N是L10N的基础和前提，为L10N做准备
> L10N是I18N向特定本地语言环境的转换
> I18N 是软件产品源语言开发的一部分，属于Engineering
> L10N 可以独立于Engineering，可由第三方完成

###字符集问题
字符集是操作系统中所使用的字符映射表  

###软件国际化标准
1. 切换语言的机制。
1. 与语言无关的输出接口。
1. 与语言无关的输入接口和标准的输入协议
1. 资源文件的国际化
1. 支持和包容本地化数据格式

###国际化测试方法
1. 设计评审和代码审查
1. 针对源语言的功能测试，如不同的区域设置、不同的时区显示
1. 针对伪翻译（pseudocod，pseudo-translation）版本的测试

###软件本地化基本步骤
1. 建立配置管理体系，跟踪目标语言各个版本的源代码；
1. 创造和维护术语表;
1. 源语言代码和资源文件分离、或提取需要本地化的文本
1. 把分离或提取的文本、图片等翻译成目标语言；
1. 把翻译好的文本、图片重新检入目标语言的源代码版本
1. 如果需要，编译目标语言的源代码;
1. 测试翻译后的软件，调整UI 以适应翻译后的文本；
1. 测试本地化后的软件，确保格式和内容都正确；

###软件本地化测试
* 功能性测试，所有基本功能、安装、升级等测试；
* 翻译测试，包括语言完整性、术语准确性等的检查；
* 可用性测试，包括用户界面、度量衡和时区等；
* 兼容性调试，包括硬件兼容性、版本兼容性等测试；
* 文化、宗教、喜好等适用性测试
* 手册验证，包括联机文件、在线帮助、PDF文件等测试

##翻译验证

###软件本地化与翻译
* 技术层面的更改

    调整大小、调整默认设置、重新编译、创建新的图形、重新编排文档格式；

* 文化层面的更改
    
    包装、图标、宣传、样品、政治敏感的术语，地方规章和宗教信仰

##软件本地化测试技术

###数据格式
1. 数字
2. 货币
3. 时间
4. 日期格式
5. 度量衡的单位
6. 复数问题

###页面显示和布局
* 德语最长，汉语比较精炼
* 乱码（双字节语言GB/BIG5/JP/ … ）
* 字符索引、排序

###配置和兼容性问题
> 配置性包括键盘布局设计，它是语言依赖性最大的硬件、打印机配置等。
> 兼容性包括与硬件的兼容性、与上一版本的数据兼容及与其他本地化软件的兼容性等等。

1. 数据库问题
2. 热键

##本地化的功能测试
* 集成测试
* 索引和排序
* 联机文档的功能测试
* DST的处理


----


#软件测试自动化

##测试自动化的内涵

###手工测试的局限性
* 通过手工测试（manual test）无法做到覆盖所有代码路径;
* 许多与时序、死锁、资源冲突、多线程等有关的错误通过手工测试很难捕捉到
* 在系统负载、性能测试时，需要模拟大量数据、或大量并发用户等各种应用场合时，也很难通过手工测试来进行
* 在进行系统可靠性时，需要模拟系统运行十年、几十年，以验证系统能否稳定运行，也是手工测试无法模拟的。
* 如果有大量（几千）的测试用例，需要在短时间内完成，手工测试又怎么办呢？
* 测试可以发现错误，并不能表明程序的正确性。
* 自动测试定义软件系统
    
    * 功能规格书(Spec)只是从书面上的
    * 一套软件产品是由一套完整的可运行的测试来定义的

###什么是测试自动化
自动化测试（automated test）是相对手工测试而存在的一个概念，由手工逐个地运行测试用例的操作过程被测试工具自动执行的过程所代替。  

> 测试工具的使用是自动化测试的主要特征

*自动化测试vs. 测试自动化*
* 自动化测试焦点集中在测试执行，主要是由测试工具自动地完成测试。
* 测试自动化指“一切可以由计算机系统自动完成的测试任务都已经由计算机系统或软件工具、程序来承担并自动执行”

###软件测试自动化的优势
* 自动运行的速度快，是手工无法相比的。
* 测试结果准确。例如搜索用时及时是0.33秒或0.24秒，系统都会发现问题，不会忽视任何差异
* 高复用性。一旦完成所用的测试脚本，可以一劳永逸运行很多遍
* 永不疲劳   
* 可靠
* 独特的能力

###自动化测试带来的好处
* 测试周期缩短
* 更高质量的产品
* 软件过程更规范
* 提高团队士气
* 节省人力资源，降低企业成本
* 充分利用硬件资源，降低企业成本。

##测试自动化实现的原理
* 代码分析: 类似于高级编译系统，在工具中定义类/对象/函数/变量等定义规则、语法规则等，在分析时对代码进行
* 语法扫描，找出不符合编码规范的地方。捕获和回放: 代码分析是一种白盒测试的自动化方法，
* 捕获和回放则是一种黑盒测试的自动化方法。直接编写脚本来操作、控制、验证对象：包括对象识别、脚本技术、对运行结果进行比较

##代码分析
代码的静态分析的关键是建立各种规则，而这种规则的建立是依赖于相应编程语言的语法。如依据EBNF（扩展巴科斯-诺尔范式）对Java代码的分析。

###对象识别
* Windows 对象

    逻辑名称是对象属性之一的值
    数值用于识别对象名称
    
* Mac 对象
* Web DOM对象

###脚本技术

* 线性脚本，是录制手工执行的测试用例得到的脚本，这种脚本包含所有的击键、移动、输入数据等，所有录制的测试用例都可以得到完整的回放。
* 结构化脚本，类似于结构化程序设计，具有各种逻辑结构、函数调用功能。
* 数据驱动脚本，将测试输入存储在独立的（数据）文件中，而不是存储在脚本中。
* 关键字驱动脚本，是数据驱动脚本的逻辑扩张

###自动比较
* 静态比较和动态比较，
* 简单比较和复杂比较，
* 敏感性测试比较和健壮性测试比较
* 比较过滤器

##测试自动化的实施
* 测试工具的分类
* 测试工具的选择
* 测试自动化普遍存在的问题
* 自动化测试的引入和应用

###测试工具的分类###
* 根据测试方法不同，分为白盒测试工具和黑盒测试工具、静态测试工具和动态测试工具等     
* 根据工具的来源不同，分为开源测试工具（多数是免费的）和商业测试工具、自主开发的测试工具和第三方测试工具等  
* 根据测试的对象和目的，分为单元测试工具、功能测试工具、性能测试工具、测试管理工具等   

###测试自动化普遍存在的问题
* 不正确的观念或不现实的期望
* 缺乏具有良好素质、经验的测试人才
* 测试工具本身的问题影响测试的质量
* 测试脚本的质量低劣
* 没有进行有效的、充分的培训
* 没有考虑到公司的实际情况，盲目引入测试工具
* 没有形成一个良好的使用测试工具的环境
* 其它问题

###测试自动化项目的本质
> 测试自动化项目本质上是软件开发项目  
*一个测试自动化项目必须具有：*
* 清晰定义并严格实施的过程
* 来自组织各级的支持
* 周密的计划
* 具体的设计和架构

###自动化测试的引入和应用
* 找准测试自动化的切入点
* 把测试开发纳入整个软件开发体系
* 测试自动化依赖测试流程和测试用例
* 软件测试自动化的投入较大
* 进行资源的合理调度

##功能测试工具
* 关键特性
* Selenium及其应用
* Web功能测试工具
* AutoIT及其客户端测试工具
* 嵌入式测试工具

*GUI测试工具步骤:*
* 录制测试脚本
* 编辑测试脚本
* 调试脚本
* 执行
* 结果分析

###Selenium及其应用
* 适合Web应用的测试，可直接运行在浏览器之上，所见即所得
* 跨平台，支持多操作系统和多种浏览器
* 支持分布式应用的测试，构造一个完整的解决方案
* 支持两种开发脚本的模式test runner （HTML文件）和driven（脚本语言编写
* 支持多种脚本语言，包括Java、C#、PHP、Perl、Python 和Ruby等

###Web功能测试工具
主要进行链接检查、HTML检查、Web功能和Web站点安全性等各个方面的测试。

###嵌入式测试工具
实时地将测试信息通过网线/串口传到宿主机（Host）上，并实时在线地显示。因此，对源代码的插装和目标机上的信息收集与回传成为嵌入式测试工具要解决的关键问题  
##性能测试工具

###性能测试工具的主要特性
* 能模拟实际用户的操作行为，记录和回放多用户测试中的事务处理过程，自动生成相应的测试脚本
* 能针对脚本进行修改，增加逻辑控制、完成参数化和数据关联
* 可以设置不同的应用环境和场景，通过虚拟用户执行相应的测试脚本
* 通过系统监控工具获得系统性能的相关指标的值

##安全性测试工具
* 支持常见的Web服务器平台
* 能同时提供对源代码和二进制文件进行扫描的功能
* 漏洞检测和纠正分析
* 检测实时系统的问题
* 不改变被测试的软件，不影响代码
* 良好的报告
* 非安全专业人士也易于上手
* 可管理部署的多种扫描器、尽可能小的错误误差等

##缺陷跟踪系统
* 基于缺陷数据库，可统一数据格式、完成数据校验，而且确保每一个缺陷不会被忽视
* 基于数据库系统，有利于建立各种动态的数据报表，用于项目状态报告和缺陷数据统计分析
* 基于系统可以随时得到最新的缺陷状态，消除沟通上的障碍。
* 基于系统可以将缺陷和测试用例、需求等关联起来，更深度的分析，有利于产品的质量改进

##测试管理系统
能管理整个测试过程，提高管理的效率和准确性，并提供一个协同合作的环境  
测试管理系统以测试用例库、缺陷库为核心  


----


#组建测试队伍

##测试队伍的地位和责任

###软件测试团队的任务
1. 发现软件程序、系统或产品中所有的问题；
1. 尽早地发现问题；
1. 督促开发人员尽快地解决程序中的缺陷；
1. 帮助项目管理人员制定合理的开发计划；
1. 并对问题进行分析、分类总结和跟踪
1. 帮助改善开发流程、提高产品开发效率；
1. 提高程序编写的规范性、易读性、可维护性等。

> 软件测试和质量保证合二为一

##测试团队的构成

###测试团队的基本构成
* QA/测试经理：人员管理，资源调配、测试方法改进等；
* 实验室管理人员：设置、配置和维护实验室的测试环境
* 内审员：审查流程，建立测试模板，跟踪缺陷测试报告的质量等；
* 测试组长：负责项目的管理、测试计划、测试用例、任务安排等；
* 测试设计人员/资深测试工程师，产品设计规格说明书的审查、
* 测试用例的设计、技术难题的解决、培训和指导、实际测试任务的执行；
* 一般（初级）测试工程师，执行测试用例和相关的测试任务。

##如何从零开始

###优秀测试工程师的素质
* 高度的责任感
* 非常好的沟通能力、幽默感
* 技术能力、自信心、耐心
* 怀疑一切的精神、勤奋精神
* 洞察力、适度的好奇心
* 反向思维和发散思维能力、记忆力
* 自我学习能力、创新能力等

##测试团队的管理和发展

###测试团队的激励方法
* 支持合理的工作方式
* 表扬和奖励
* 站在测试小组一边
* 提高士气

*树立良好的测试团队意识:*  
目标意识、团队意识、服务意识、竞争意识和危机意识   

###知识共享和在岗培训
评估、考试、认证体系


-----


#部署测试环境

##测试环境的重要性
测试环境是测试的基础  

软件环境分为主测试环境和辅测试环境。
1. 主测试环境是测试软件功能、安全可靠性、性能、易用性等大多数指标的主要环境
1. 辅助测试环境满足特殊的测试需求
    
    * 兼容性测试
    * 模拟真实环境测试
    * 横向对比测试

##测试环境要素

###硬件
* 机架式服务器
* 刀片式服务器
* 客户端机器
* 移动设备
* 声卡、显示卡、麦克风

###网络环境
1. 100M、1G、10G网
1. 局域网、广域网、无线网
1. 网络协议
1. 防火墙、代理服务器或网关

###软件
* 操作系统
* 数据库
* Web服务器
* 测试工具
* 应用软件
* 被测试系统

###数据准备
1. 原有数据
1. 正确数据和错误数据
1. 真实的客户数据
1. 大量的数据

##虚拟机的应用
*为什么使用虚拟机:*
* 充分利用硬件资源，有70％的服务器利用率只有20％～30 借助虚拟机技术提高到85％～95％
* 节约能源和空间。例如如果内存加大到16G或更高，一台机器可以虚拟4～8台服务器
* 提升运作效率，几分钟就可装载所需的系统镜像文件
* 有利于环境的建立和维护，容易实现添加、移动、变更和重置服务器的操作

###虚拟机软件

####VMware的虚拟机解决方案
1. VMware-ESX-Server （企业级，No OS）
1. VMware-GSX-Server (工作组级)
1. VMware-workstation （客户端）

##建立测试实验室
* 实验室建立的评估分析
* 选择和规划实验室
* 集成和配置测试设备

##如何建立项目的测试环境
* 事先要清楚项目的要求，如软件构架文档、部署模型测试自动化架构、测试数据的要求和测试策略和测试方法
* 规划测试环境
* 列出设备清单
* 环境实施：如安装虚拟机系统、操作系统、网络配置、安装应用系统、配置并调试应用软件

##自动部署测试环境

##测试环境的维护和管理


-----


#测试用例的设计

##测试用例构成及其设计

###测试用例的重要性
测试用例可以独立进行测试执行的最小单元  
测试内容的一系列情景和每个情景中必须依靠输入和输出，而对软件的正确性进行判断的测试文档，称为测试用例  
测试用例就是将软件测试的行为活动转化为规范化的文档  

> 软件测试是有组织性、步骤性和计划性的，为了能将软件测试的行为转换为可管理的、具体量化的模式，需要创建和维护测试用例

> 测试用例是测试工作的指导，是软件测试的必须遵守的准则，更是软件测试质量稳定的根本保障

###测试用例的作用
> 重要参考依据，提高测试质量

###测试用例设计书写标准
*描述测试需要哪些内容:*

* 标志符（Identification）
* 测试项（Test Items）
* 测试环境要求
* 输入标准（Input Criteria）
* 输出标准（Output Criteria）
* 测试用例之间的关联

*良好测试用例的特征:*
* 可以最大程度地找出软件隐藏的缺陷
* 可以最高效率的找出软件缺陷
* 可以最大程度地满足测试覆盖要求
* 既不过分复杂、也不能过分简单
* 使软件缺陷的表现可以清楚的判定
    
    *测试用例包含期望的正确的结果
    *待查的输出结果或文件必须尽量简单明了

* 不包含重复的测试用例
* 测试用例内容清晰、格式一致、分类组织

###测试用例设计考虑因素
* 具有代表性、典型性
* 寻求系统设计、功能设计的弱点
* 测试用例需要考虑到正确的输入，也需要考虑错误的或者异常的输入，以及需要分析怎样使得这样的错误或者异常能够发生
* 考虑用户实际的诸多使用场景

###测试用例设计的基本原则
* 尽量避免含糊的测试用例
    
    Pass/Failed is clear, 操作环境，操作步骤

* 尽量将具有相类似功能的测试用例抽象并归类
    
    数据驱动的测试用例

* 尽量避免冗长和复杂的测试用例
    
    操作步骤&lt;=7, 一个测试用例一个验证点（理想情况）

###单个测试用例的质量要求
* 具有可操作性
* 具备所需的各项信息
* 各项信息描述准确、清楚
* 测试目标针对性强
* 验证点完备，而且没有太多的验证点
* 没有太多的操作步骤，例如不超过7步
* 符合正常业务惯例。

###整体测试用例的质量要求
* 覆盖率。依据特定的测试目标的要求，尽可能覆盖所有的测试范围、功能特性和代码。
* 易用性。测试用例的设计思路清晰、组织结构层次合理，测试用例操作的连贯性好，使单个模块的测试用例执行顺畅。
* 易维护性。应该以很少的时间来完成测试测试用例的维护工作，包括添加、修改和删除测试用例。易用性和易读性，也有助于易维护性。
* 粒度适中。既能覆盖各个特定的场景，保证测试的效率；又能处理好不同数据输入的测试要求，提高测试用例的可维护性。

##测试用例组织和维护
1. 测试用例的属性

    * 目标性，包括功能性、性能、容错性、数据迁移等各方面的测试用例；
    * 所属的范围，属于哪一个组件或模块
    * 关联性，和软件产品特性相联系
    * 阶段性，属于单元测试、集成测试、系统测试、验收测试中的某一个阶段
    * 时效性，不同的版本所适用的测试用例可能不相同
    
1. 测试套件及其构成方法

    建立合适的、可扩展的测试用例框架，从而借助这个框架能有效地组织众多的测试用例，包括对测试用例的分类、清晰的层次结构等

    > 测试套件是由一系列测试用例并与之关联的测试环境组合而构成的集合，已满足测试执行的特定要求。通过测试套件，将服务于同一个测试目标、特定的测试任务或某一运行环境下的一系列测试用例有机地组合起来

    > 1. 按程序功能模块组织
    > 2. 按测试用例的类型组织
    > 3. 按测试用例的优先级组织
    
    > 测试套件应用场合:
    * 只是部分功能模块发生了变化，就可以创建由这些改动模块的测试用例构成的测试套件
    * 在修改的模块中，也不需要选择所有的测试用例，针对不同的优先级创建不同的测试套件
    * 测试执行的第一阶段可以创建一个特定平台上的测试套件有必要为自动化测试、手工测试分别建立测试套件。
    * 还可以建立和测试人员相对应的、不同平台或不同模块的测试套件
    * 回归测试中，可以先运行曾经发现缺陷的测试用例，然后再运行从来没有发现的缺陷的测试用例

1. 跟踪测试用例
1. 维护测试用例

    测试用例的维护是持续改进的过程  

1. 测试用例的覆盖率

    测试用例本身
        
        发现缺陷后补充的测试用例数/ 总的测试用例数
    
    需求、功能点覆盖率
        
        每个功能点都要有测试用例，平均>4个/FP 

    代码覆盖率
        
        借助工具跟踪执行过程，了解代码行、类、方法等覆盖率情况



----


#报告所发现的缺陷

##软件缺陷的描述

###软件缺陷的生命周期
软件缺陷生命周期指的是一个软件缺陷被发现、报告到这个缺陷被修复、验证直至最后关闭的完整过程  

###基本的缺陷生命周期
* 发现-打开：测试人员找到软件缺陷并将软件缺陷提交给开发人员。
* 打开-修复：开发人员再现、修复缺陷，然后提交给测试人员去验证。
* 修复-关闭：测试人员验证修复过的软件，关闭已不存在的缺陷。

###严重性和优先级
严重性（severity）衡量缺陷对客户满意度的影响程度  

    > 致命的（fatal）、严重的（critical）、一般的（major）、微小的（minor）

优先级(Priority)：指缺陷被修复的紧急程度。  

    * 立即解决(P1级) 
    * 高优先级(P2级）
    * 正常排队(P3级）
    * 低优先级(P4级）
    
###缺陷的其它属性
    * 缺陷标识（ID）
    * 缺陷类型（type），如功能、UI、性能、文档
    * 缺陷产生可能性（frequency）/可再现的概率
    * 缺陷来源（source）：需求、设计、编码
    * 缺陷原因（cause）：数据格式、计算错误、接口参数、变量定义与引用等

###完整的缺陷信息
* “步骤”提供了如何重复当前缺陷的准确描述，应简明而完备、清楚而准确。这些信息对开发人员是关键的，视为修复缺陷的向导
* “期望结果”与测试用例标准或设计规格说明书或用户需求等一致，达到软件预期的功能。是验证缺陷的依据。
* “实际结果”实际执行测试的结果，不同于期望结果，从而确认缺陷的存在

*软件缺陷报告*
任何一个缺陷跟踪系统的核心都是“软件缺陷报告”  

###缺陷描述的基本要求
* 单一准确
* 可以再现
* 完整统一
* 短小简练
* 特定条件
* 补充完善
* 不做评价

##软件缺陷的相关信息

###软件缺陷的图片信息
软件缺陷相关的信息包括软件缺陷的图片、记录信息和如何再现和分离软件缺陷，使开发人员和其他的测试人员更容易分离和重现它  

###分离和再现软件缺陷
* 确保所有的步骤都被记录。
* 特定条件和时间。
* 压力和负荷、内存和数据溢出相关的边界条件。
* 考虑资源依赖性包括内存、网络和硬件共享的相互作用等。
* 不能忽视硬件。与软件不同，硬件不按预定方式工作。
* 和开发人员紧密合作

##软件缺陷跟踪和分析
* 确保每个被发现的缺陷都能够被解决，“解决”的意思不一定是被修正，也可能是其他处理方式（例如，延迟到下一个版本中修正或者由于技术原因不能被修正），总之，对每个被发现的BUG的处理方式必须能够在开发组织中达到一致；
* 收集缺陷数据并根据缺陷趋势曲线识别测试处于测试过程中的哪个阶段；
* 决定测试过程是否结束，通过缺陷趋势曲线来确定测试过程是否结束是常用并且较为有效的一种方式。
* 收集缺陷数据并在其上进行数据分析，作为组织过程改进的财富。

###软件缺陷处理技巧
* 审阅。可以由测试管理员、项目管理员或其他人来进行审阅缺陷报告的质量水平；
* 拒绝。如果审阅者决定需要对一份缺陷报告进行重大修改，应该和测试人员一起讨论，由测试人员纠正缺陷报告，然后再次提交；
* 完善。完整地描述了问题的特征并将其分离，那么审查者就会肯定这个报告；
* 分配。分配给适当的开发人员，如果不知道具体开发人员，应分配给项目开发组长，由开发组长再分配给对应的开发人员； 
* 验证。缺陷的修复需要得到测试人员的验证，同时还要进行回归测试，检查这个缺陷的修复是否会引入新的问题；
* 重新打开。重新打开一个缺陷，需要加注释说明、电话沟通等，否则会引起“打开-修复”多个来回，造成测试人员和开发人员不必要的矛盾
* 关闭。只有测试人员有关闭缺陷的权限，开发人员没有这个权限。
* 暂缓。如果每个人都同意将确实存在的缺陷移到以后处理，应该指定下一个版本号或修改的日期。一旦新的版本开始时，这些暂缓的缺陷应该重新被打开。

###缺陷趋势分析
*监控（打开/关闭/已修正的）缺陷随时间的变化:*
1. 产品开发质量情况取决于累积打开/关闭曲线的趋势。
2. 项目进度取决于累积关闭/打开曲线起点的时间差。
3. 开发人员、测试人员的工作进度、效率也能得到反映

###缺陷分布分析

*缺陷报告*
* 缺陷分布报告，允许将缺陷计数作为一个或多个缺陷参数的函数来显示，生成缺陷数量与缺陷属性的函数。如测试需求和缺陷状态、严重性的分布情况等。
* 缺陷趋势报告，按各种状态将缺陷计数作为时间的函数显示。趋势报告可以是累计的，也可以是非累计的；
* 缺陷年龄报告，显示缺陷处于活动状态的时间，展示一个缺陷处于某种状态的时间长短，从而了解处理这些缺陷的进度情况。
* 测试结果进度报告，展示测试过程在被测应用的几个版本中的执行结果以及测试周期

###缺陷跟踪方法
1. 当前缺陷状态–Bug Dashboard
1. 项目发展趋势: 每天的变化、差异，重点进行趋势分析

*Bug的优先排列*
* 可重复性(Repeatability)
* 可发生性(Visibility)
* 严重性(Severity)
> 优先级=（可重复性+可发生性）X 严重性

*必须……*
* 尽早定义和推广Bug管理流程
* 明确定义优先级和严重级衡量标准
* 清晰设置Bug提交必须的信息
* 周期性的会诊Bug
* 周期性的检查Bug列表

*No ……*
* 把全球版本的Bug和本地版本的Bug混为一谈
* 试图隐藏你的Bug
* 解决和关闭你自己的Bug
* 未经诊断发布一个补丁

##软件缺陷跟踪系统

* 推动团队内部的有效沟通
* 提供报表和分析
* 按照优先级排列重要Bug
* 跟踪任何一个Bug的整体生命周期
* 纪录任何跟Bug有关的操作
* 报告任何一个Bug的当前状态


----


#测试和软件质量分析报告

##软件产品的质量度量

###软件度量及其过程
软件度量是对软件所包含的各种属性的量化表示  
> 定性-&gt;定量

*软件度量可以帮助我们深入了解软件过程和产品的衡量指标，使组织能够更好地做出决策以达成目标：*
- 用数据指标表明验收标准；
- 监控项目进度和预见风险；
- 分配资源时进行量化均衡；
- 预计和控制产品的过程、成本和质量。

*软件度量的分类*
* 软件过程度量
* 软件项目度量
* 产品质量度量

*软件度量的内容*
* 规模度量：代码行数，功能点和对象点等
* 复杂度度量：软件结构复杂度指标。
* 缺陷度量：帮助确定产品缺陷变化的状态，并指示修复缺陷活动所需的工作量，分析产品缺陷分布的情况
* 工作量度量
* 进度度量
* 生产率度量：代码行数／人·月，测试用例数/人·日；
* 风险度量：“风险发生的概率”和“风险发生后所带来的损失”

*软件度量的分工*
* 度量工作小组由专职的度量研究人员和项目协调人员组成，度量研究人员的主要职责是定义度量过程和指导进行度量活动，并对数据进行分析、反馈；项目协调人员的职责是为定义度量过程提供详细的需求信息，并负责度量过程在项目组的推行。
* 数据提供者一般是项目中的研发人员，有时还会包括用户服务人员和最终用户。
* IT支持者确定数据提供的格式与数据存储方式，提供数据收集工具与数据存储设备

*软件度量的过程*
* 识别目标。分析出度量的工作目标和列表，并由管理者审核确认定义度量过程。定义其收集要素、收集过程、分析、反馈过程、IT支持体系，为具体的收集活动、分析、反馈活动和IT设备、工具开发提供指导。
* 搜集数据。应用IT支持工具进行数据收集工作，并按指定的方式审查和存储。
* 数据分析与反馈。根据数据收集结果，按照已定义的分析方法进行数据分析，完成规定格式的图表，进行反馈。
* 过程改进。根据度量的分析报告，管理者基于度量数据做出决策。

###软件质量的度量
软件可靠性度量、复杂度度量、缺陷度量和规模度量  
`Mi＝c1×f1＋c2×f2＋…＋cn×fn`
> Mi是一个软件质量因素(如SQRC层各项待计算值)，fn是影响质量因素的度量值（如SQDC层各项估计值），cn是加权因子。

###质量度量的统计方法
* 说明不完整或说明错误(IES)
* 与客户交流不够所产生的误解(MCC)
* 故意与说明偏离(IDS)
* 违反编程标准(VPS)
* 数据表示有错(EDR)
* 模块接口不一致(IMI)
* 设计逻辑有错(EDL)
* 不完整或错误的测试(IET)
* 不准确或不完整的文档(IID)
* 将设计翻译成程序设计语言中的错误(PLT)
* 不清晰或不一致的人机界面(HCI)
* 杂项(MIS)

##评估系统测试的覆盖程度
*软件测试评估主要有两个目的*
* 量化测试进程，判断测试进行的状态和进度
* 为测试或质量分析报告生成所需的量化数据，如缺陷清除率、测试覆盖率等

###对软件需求的估算
假设有R个需求，功能需求的数目为F,非功能需求数为N, 则：R= F + N.  
1. 需求确定性Q1

    `Q1＝M/R`
    > 其中Q1表示需求的确定性，M是所有复审者都有相同解释的需求数目。

1. 功能需求的完整性Q2：

    `Q2＝Fu/(Ni×Ns)`
    其中Fu是唯一功能需求的数目，Ni是由规格设计说明书定义的输入个数，Ns是被表示的状态的个数。

1. 考虑非功能需求:

    `Q3＝Fc/(Fc＋Fnv)`
    其中Fc是已经确认为正确的需求的个数，Fnv是尚未被确认的需求的个数

###基于需求的测试覆盖评估
> 假定Tx已执行的测试过程数或测试用例数，Rft是测试需求的总数：
`已执行的测试覆盖＝Tx／Rft`
> 假定Ts是已执行的完全成功、没有缺陷的测试过程数或测试用例数。
`成功的测试覆盖＝Ts／Rft`

###基于代码的测试覆盖评估
基于代码的测试覆盖评测是对被测试的程序代码语句、路径或条件的覆盖率分析。这种策略对于安全至上的系统来说非常重要    

*基于代码的测试覆盖通过以下公式计算：*
`已执行的测试覆盖＝Tc／Tnc`
> 其中Tc是用代码语句、条件分支、代码路径、数据状态判定点或数据元素名表示的已执行项目数，Tnc（Total number of items in the code）是代码中的项目总数。

##基于缺陷分析的产品质量评估

###缺陷评测的基线
为软件产品的质量设置起点，在基线的基础上再设置新的目标，作为对系统评估是否通过的标准  

###经典的种子公式
`全部的非种子Bug (N)=所有的种子Bug (S) *已测试出的非种子Bug (n)/已测试出的种子Bug (s) `   

这种测试是否充分，可以用一个信心指数来表示，即用一个百分比表示，值越大，说明对产品质量的信心越高，最大值为1。
   
`C   = 1 if n>N
    = S/(S-N+1), if n<=N`

###基于缺陷清除率的估算方法
F为描述软件规模用的功能点；D1为在软件开发过程中发现的所有缺陷数；D2为软件发布后发现的缺陷数；D为发现的总缺陷数。D=D1+D2  

* 质量= D2/F
* 缺陷注入率= D/F
* 整体缺陷清除率=D1/D

###软件产品性能评估
软件产品性能评估其技术性相对比较强，方法的基础是获取与性能表现相关的数据。性能评测一般和测试的执行结合起来做，或者是在执行测试时记录、保存各种数据，然后在评估测试活动中计算结果主要的性能评测包括：  

* 动态监测
* 响应时间／吞吐量
* 百分比报告
* 比较报告
* 追踪报告

##测试报告的具体内容
* 产品标识；
* 用于测试的计算机系统
* 使用的文档及其标识
* 产品描述、用户文档、程序和数据的测试结果；
* 与要求不符的清单；
* 针对建议的要求不符的清单，产品未作符合性测试的说明；
* 测试结束日期。


-----


#软件测试项目管理
























    


























    




###压力测试

###容量测试










完美测试--对软件测试的各种幻想
web安全测试

JMeter:apache

软件配置管理Mercurial(SCM)和项目管理工具
个人软件过程、团队软件过程

SDLC:Software Development Life Circle

IEC12207 软件生存周期过程  
1. 主要过程
1. 支持过程
1. 组织过程

软件能力成熟度模型(CMMI)
    1.CMMI 2.PSP 3.TSP 4.RSP 5.XP 6.MSF(miscrosoft)

1. SaaS: Software as a service
1. PaaS: Platform as a service
1. IaaS: Intrastracture as a service

软件测试的正反两面性:
1. 验证
1. 发现缺陷
1. V&V

测试驱动开发(TDD)->验收测试驱动开发(ATDD)

质量:  
1. 产品质量
1. 过程质量
