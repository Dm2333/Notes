#C99

##头文件与源文件

简单的说, 要理解C文件与头文件有什么不同, 首先需要明白编译器的工作过程.

1. 预处理
2. 词法与语法分析阶段
3. 编译阶段, 首先变异成纯汇编语句, 再将之汇编成跟CPU相关的二进制码, 生成各个目标文件(.obj文件)
4. 链接阶段, 将各个目标文件中的各段代码进行绝对地址定位, 生成跟特定平台相关的可执行文件, 当然, 最后还可以用objcopy生成纯二进制码

编译器在编译时是以C文件为单位进行的，也就是说如果你的项目中一个C文件都没有，那么你的项目将无法编译，连接器是以目标文件为单位，它将一个或多个目标文件进行函数与变量的重定位，生成最终的可执行文件，在PC上的程序开发，一般都有一个main函数，这是各个编译器的约定，当然，你如果自己写连接器脚本的话，可以不用main函数作为程序入口！！！！

1. 预处理阶段：编译器以C文件作为一 个单元，首先读这个C文件，发现第一句与第二句是包含一个头文件，就会在所有搜索路径中寻找这两个文件，找到之后，就会将相应头文件中再去处理宏，变量， 函数声明，嵌套的头文件包含等，检测依赖关系，进行宏替换，看是否有重复定义与声明的情况发生，最后将那些文件中所有的东东全部扫描进这个当前的C文件 中，形成一个中间“C文件”
2. 编译阶段，在上一步中相当于将那个头文件中的test变量扫描进了一个中 间C文件，那么test变量就变成了这个文件中的一个全局变量，此时就将所有这个中间C文件的所有变量，函数分配空间，将各个函数编译成二进制码，按照特 定目标文件格式生成目标文件，在这种格式的目标文件中进行各个全局变量，函数的符号描述，将这些二进制码按照一定的标准组织成一个目标文件
3. 连接阶段，将上一步成生的各个目标文件，根据一些参数，连接生成最终的可 执行文件，主要的工作就是重定位各个目标文件的函数，变量等，相当于将个目标文件中的二进制码按一定的规范合到一个文件中

----

理论上来说C文件与头文件里的内容，只要是C语言所支持的，无论写什么都可以的，比如你在头文件中写函数体，只要在任何一个C文件包含此头文 件就可以将这个函数编译成目标文件的一部分（编译是以C文件为单位的，如果不在任何C文件中包含此头文件的话，这段代码就形同虚设），你可以在C文件中进 行函数声明，变量声明，结构体声明，这也不成问题！！！那为何一定要分成头文件与C文件呢？又为何一般都在头件中进行函数，变量声明，宏声明，结构体声明 呢？而在C文件中去进行变量定义，函数实现呢？？原因如下： 

1. 如果在头文件中实现一个函数体，那么如果在多个C文件中引用它，而且又同时编 译多个C文件，将其生成的目标文件连接成一个可执行文件，在每个引用此头文件的C文件所生成的目标文件中，都有一份这个函数的代码，如果这段函数又没有定义成局部函数，那么在连接时，就会发现多个相同的函数，就会报错 
1. 如果在头文件中定义全局变量，并且将此全局变量赋初值，那么在多个引用此头文件的C文件中同样存在相同变量名的拷贝，关键是此变量被赋了初值，所以编译器就会将此变量放入DATA段，最终在连接阶段，会在DATA段中存在多个相同的变量，它无法将这些变量统一成一个变量，也就是仅为此变量分配一个空间，而不是多份空间，假定这个变量在头文件没有赋初值，编译器就会将之放入BSS段，连接器会对BSS段的多个同名变量仅分配一个存储空间 
1. 如果在C文件中声明宏，结构体，函数等，那么我要在另一个C文件中引用相应的宏，结构体，就必须再做一次重复的工作，如果我改了一个C文件中的一个声明，那么又忘了改其它C文件中的声明，这不就出了大问题了，程序的逻辑就变成了你不可想象的了，如果把这些公共的东东放在一个头文件中，想用它的C文件就只需要引用一个就OK了！！！这样岂不方便，要改某个声明的时候，只需要动一下头文件就行了 
1. 在头文件中声明结构体，函数等，当你需要将你的代码封装成一个库，让别人来用你的代码，你又不想公布源码，那么人家如何利 用你的库呢？也就是如何利用你的库中的各个函数呢？？一种方法是公布源码，别人想怎么用就怎么用，另一种是提供头文件，别人从头文件中看你的函数原型，这 样人家才知道如何调用你写的函数，就如同你调用printf函数一样，里面的参数是怎样的？？你是怎么知道的？？还不是看人家的头文件中的相关声明 啊！！！当然这些东东都成了C标准，就算不看人家的头文件，你一样可以知道怎么使用

----

##头文件如何关联源文件

其实.cpp和.h文件名称没有任何直接关系，很多编译器都可以接受其他扩展名。 

谭浩强老师的《C程序设计》一书中提到，编译器预处理时，要对#include命令进行“文件包含处理”：将headfile.h的全部内容复制到#include “headfile.h”处。这也正说明了，为什么很多编译器并不care到底这个文件的后缀名是什么----因为#include预处理就是完成了一个“复制并插入代码”的工作。 

程序编译的时候，并不会去找b.cpp文件中的函数实现，只有在link的时候才进行这个工作。我们在b.cpp或c.cpp中用#include “a.h”实际上是引入相关声明，使得编译可以通过，程序并不关心实现是在哪里，是怎么实现的。源文件编译后成生了目标文件（.o或.obj文件），目标文件中，这些函数和变量就视作一个个符号。在link的时候，需要在makefile里面说明需要连接哪个.o或.obj文件（在这里是b.cpp生成的.o或.obj文件），此时，连接器会去这个.o或.obj文件中找在b.cpp中实现的函数，再把他们build到makefile中指定的那个可以执行文件中。

----

###规范

所以说:
.h文件是头文件，内含函数声明、宏定义、结构体定义等内容.c文件是程序文件，内含函数实现，变量定义等内容。而且是什么后缀也没有关系，只不过编译器会默认对某些后缀的文件采取某些动作。你可以强制编译器把任何后缀的文件都当作c文件来编。

这样分开写成两个文件是一个良好的编程风格。

而且，比方说 我在aaa.h里定义了一个函数的声明，然后我在aaa.h的同一个目录下建立aaa.c ， aaa.c里定义了这个函数的实现，然后是在main函数所在.c文件里#include这个aaa.h  然后我就可以使用这个函数了。 main在运行时就会找到这个定义了这个函数的aaa.c文件。这是因为：main函数为标准C/C++的程序入口，编译器会先找到该函数所在的文件。假定编译程序编译myproj.c（其中含main()）时，发现它include了mylib.h（其中声明了函数void test()），那么此时编译器将按照事先设定的路径（Include路径列表及代码文件所在的路径）查找与之同名的实现文件（扩展名为.cpp或.c，此例中为mylib.c），如果找到该文件，并在其中找到该函数（此例中为void test()）的实现代码，则继续编译；如果在指定目录找不到实现文件，或者在该文件及后续的各include文件中未找到实现代码，则返回一个编译错误.其实include的过程完全可以“看成”是一个文件拼接的过程，将声明和实现分别写在头文件及C文件中，或者将二者同时写在头文件中，理论上没有本质的区别。以上是所谓动态方式。对于静态方式，基本所有的C/C++编译器都支持一种链接方式被称为Static Link，即所谓静态链接。在这种方式下，我们所要做的，就是写出包含函数，类等等声明的头文件（a.h,b.h,...），以及他们对应的实现文件（a.cpp,b.cpp,...），编译程序会将其编译为静态的库文件（a.lib,b.lib,...）。在随后的代码重用过程中，我们只需要提供相应的头文件（.h）和相应的库文件（.lib），就可以使用过去的代码了。相对动态方式而言，静态方式的好处是实现代码的隐蔽性，即C++中提倡的“接口对外，实现代码不可见”。有利于库文件的转发.c文件和.h文件的概念与联系

****

##`#include`

####include <file>和#include“file”有什么不同?

1. 用符号“<”和“>”将要包含的文件的文件名括起来。这种方法指示预处理程序到预定义的缺省路径下寻找文件。预定义的缺省路径通常是在INCLUDE环境变量中指定的，请看下例：   

        INCLUDE=C:\COMPILER\INCLUDE；S:\SOURCE\HEADERS；
    对于上述INCLUDE环境变量，如果用#include<file>语句包含文件，编译程序将首先到C:\COMPILER\INCLUDE目录下寻找文件；如果未找到，则到S:\SOURCE\HEADERS目录下继续寻找；如果还未找到，则到当前目录下继续寻找。

2. 用双引号将要包含的文件的文件名括起来。这种方法指示预处理程序先到当前目录下寻找文件，再到预定义的缺省路径下寻找文件。

    对于上例中的INCLUDE环境变量，如果用#include“file”语句包含文件，编译程序将首先到当前目录下寻找文件；如果未找到，则到C:\COMPILER\INCLUDE目录下继续寻找；如果还未找到，则到S:\SOURCE\HEADERS目录下继续寻找。

`#include <file>`语句一般用来包含标准头文件(例如stdio.h或stdlib.h)，因为这些头文件极少被修改，并且它们总是存放在编译程序的标准包含文件目录下。`#include "file"`语句一般用来包含非标准头文件，因为这些头文件一般存放在当前目录下，你可以经常修改它们，并且要求编译程序总是使用这些头文件的最新版本。

****

##Array

`int myArray[10] = { 1, 2 }; // initialize to 1,2,0,0,0...`
`int myArray[10] = { 0 }; // all elements 0`
`int array[1024] = {[0 ... 1023] = 5}; //GCC only`

****

##**Function**

###值传递

形参是实参的拷贝，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参->形参），参数的值只能传入，

不能传出。当函数内部需要修改参数，并且不希望这个改变影响调用者时，采用值传递。

    //值传递
    void change1(int n){
        cout<<"值传递--函数操作地址"<<&n<<endl;         //显示的是拷贝的地址而不是源地址 
        n++;
    }
    change1(n);

----

###指针传递

形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作

     //指针传递
    void change3(int *n){
         cout<<"指针传递--函数操作地址 "<<n<<endl; 
        *n=*n+1;
    }
    change3(&n);

指针传递参数本质上是值传递的方式，它所传递的是一个地址值。值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。

----

###引用传递

    //引用传递
    void change2(int & n){
        cout<<"引用传递--函数操作地址"<<&n<<endl; 
        n++;
    }
    change2(n);

引用的规则：  

1. 引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。 
2. 不能有NULL引用，引用必须与合法的存储单元关联（指针则可以是NULL）。 
3. 一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。 

----

###return

函数不一定都有返回值,不带表达式的return语句将把控制权返回给调用者,但不返回有用值  

函数原形与函数声明中的参数名不要求相同.事实上,函数原型的参数名是可选的.  


##intptr_t,uintptr_t

表示当前平台下能够安全地对指针进行转型的整型变量

    float* p=new float[...];  
    //.........................  
    intptr_t a=(intptr_t)p;  
    uintptr_t a2=(uintptr_t)p;  


****

##**Pointer**

###Dangling Pointer&Wild Pointer

迷途指针与野指针指的是不指向任何合法的对象的指针。

1. 当所指向的对象被释放或者收回，但是对该指针没有作任何的修改，以至于该指针仍旧指向已经回收的内存地址，此情况下该指针便称迷途指针

    若操作系统将这部分已经释放的内存重新分配给另外一个进程，而原来的程序重新引用现在的迷途指针，则将产生无法预料的后果。

1. 某些编程语言允许未初始化的指针的存在，而这类指针即为野指针

####Wild Pointer成因
1. 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL 指针，它 的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么 将指针设置为NULL，要么让它指向合法的内存。例如

    char *p = NULL;
    char *str = (char *) malloc(100);

2. 指针p 被free 或者delete 之后，没有置为NULL，让人误以为p 是个合法的指针。
3. 指针操作超越了变量的作用范围

----

###NULL

1. NULL: 定义为0或0L或(void *)0，用于指示一个指针值是空，即什么都不指；
1. '\0': 用且只用字符串结束符;
1. NUL : 0x00,0值字符，可以用于结束ASCII字符串，和'\0'类似，但是在c/c++中没有定义，如果要使用的话，需要自定义为 #define NUL '\0';
1. EOF ：通常定义为-1, 文件结束符标志，一般是ctrl+z. 


****

##析构函数

 “析构函数”功能是构造函数的反向操作。 它们调用，当销毁对象时 (释放)。 指定某个函数作为类的析构函数通过在类名用代字号 (~)

多个规则管理析构函数的声明。 析构函数：

1. 不接受参数。
1. 无法指定任何返回类型（包括 void）。
1. 无法使用 return 语句返回值。
1. 无法声明为 const、volatile 或 static。 但是，可以为声明为 const、volatile 或 static 的对象的析构调用它们。
1. 可以声明为 virtual。 通过使用虚拟析构函数，无需知道对象的类型即可销毁对象 - 使用虚函数机制调用该对象的正确析构函数。 请注意，析构函数也可以声明为抽象类的纯虚函数。

----

当发生以下事件之一时，将调用析构函数：

1. 对象分配空间使用`new`,显式释放使用`delete`.当对象使用`delete`,空间作为"派生程度最大对象" 或非基本数据类型子类的对象被释放或对象，这样的"首选派生对象"释放,只有当有虚拟析构函数时菜确保工作.当多重继承且类型信息与实际对象underlying类型不符时,Deallocation可能失败。

1. 块范围内的本地 （自动） 对象超出范围时。

1. 临时对象的生存期结束。

1. 程序结束时全局或静态对象存在。

1. 使用析构函数的完全限定的名称显式调用析构函数

----

析构函数可以自由调用类成员函数和访问的类成员数据.如果从析构函数调用虚函数时，调用的函数为即将被销毁类型的函数实现

1. 无法获得析构函数的地址
1. 派生类无法继承基类的析构函数.相反,派生类的析构函数会override基类析构函数

----

###析构函数调用次序

1. The class's destructor is called, and the body of the destructor function is executed.
1. Destructors for nonstatic member objects are called in the reverse order in which they appear in the class declaration. The optional member initialization list used in construction of these members does not affect the order of (construction or) destruction  //! 声明中出现的非静态成员会以相反的顺序依次销毁.构造函数中optional member initialization并不对销毁顺序造成影响
1. Destructors for nonvirtual base classes are called in the reverse order of declaration.
1. Destructors for virtual base classes are called in the reverse order of declaration.

----

###显式析构函数调用

如果你用placement new在内存中建立对象，你应该避免在该内存中用delete操作符。因为delete操作符调用operator delete来释放内存，但是包含对象的内存最初不是被operator new分配的，placement new只是返回转递给它的指针。谁知道这个指针来自何方？而你应该显式调用对象的析构函数来解除构造函数的影响

    s.String::~String();     // Nonvirtual call
    ps->String::~String();   // Nonvirtual call
    
    s.~String();       // Virtual call
    ps->~String();     // Virtual call

----

###Virtual Destructor

using namespace std;  
  
    class Base  
    {  
        public:  
            Base(){ cout<<"Constructing Base\n";}  
      
         // this is a destructor:  
      
            ~Base(){ cout<<"Destroying Base\n";}  
    };  
      
    class Derive: public Base  
    {  
            public:  
            Derive(){ cout<<"Constructing Derive\n";}  
      
            ~Derive(){ cout<<"Destroying Derive\n";}  
     };  
      
    int main()  
    {  
            Base *basePtr = new Derive();  
      
            delete basePtr;  
            return 0;  
    }  

> 当我们删除指向Deriver 的基类指针时， Deriver类中的析构函数没有调用。这里调用的是Base的析构函数（静态联编）

----

将基类析构函数生命为虚析构函数，

我们需要做的就是修改Base 类中的析构函数，在～前面加上virtual

我们在基类中将析构函数标明为虚函数，就表示在使用析构函数时，是采用动态联编的。那么delete basePtr的时候不再是采用静态联编直接在编译的时候确定basePtr指向的析构函数，而是在运行的时候根据 指向的类型来调用析构函数。

> 如果你在 派生类中 分配了 内存空间的话，没有将基类的析构函数声明为虚析构函数，很容易发生内存泄漏事件

> 当你的基类的析构函数不为虚的话，其子类中所有的成员变量的类中分配的内存也将可能泄漏

> 将基类的析构函数设为virtual型，则所有的基类的派生类对象的析构函数都会自动设置为virtual型，这保证了任何情况下，不会出现由于析构函数没有被调用而导致的内存泄漏。 

****

##new,delete operator

> 使用 new 得来的空间，必须用 delete 来释放；使用 new [] 得来的空间，必须用 delete [] 来释放。彼此之间不能混用

###new operator

它要完成的功能分成两部分。第一部分是分配足够的内存以便容纳所需类型的对象。第二部分是它调用构造函数初始化内存中的对象。new操作符总是做这两件事情，你不能以任何方式改变它的行为。  

    int *p1 = (int *)malloc(sizeof(int) * length);
    int *p2 = new int[length];

----

##delete operator

`delete []objects;`

****

##operator new

你所能改变的是如何为对象分配内存。new操作符调用一个函数来完成必需的内存分配，你能够重写或重载这个函数来改变它的行为。new操作符为分配内存所调用函数的名字是operator new。  

`void * operator new(size_t size);`

返回值类型是void*，因为这个函数返回一个未经处理（raw）的指针，未初始化的内存。（如果你喜欢，你能写一种operator new函数，在返回一个指针之前能够初始化内存以存储一些数值，但是一般不这么做。）参数size_t确定分配多少内存。你能增加额外的参数重载函数operator new，但是第一个参数类型必须是size_t。  

----

你一般不会直接调用operator new，但是一旦这么做，你可以象调用其它函数一样调用它：

`void *rawMemory = operator new(sizeof(string));`

****

##Placement new

有时你有一些已经被分配但是尚未处理的的(raw)内存，你需要在这些内存中构造一个对象。你可以使用一个特殊的operator new ，它被称为placement new。

    class Widget {
    　public:
    　　Widget(int widgetSize);
    　　...
    };

placement new是标准C++库的一部分。为了使用placement new，你必须使用语句#include <new>  

> 如果用placement new建立对象,应避免使用delete operator,而是显式调用对象的析构函数解除构造函数的影响

    

    Widget * constructWidgetInBuffer(void *buffer,int widgetSize)
    {
    　return new (buffer) Widget(widgetSize);
    }

> 这个函数返回一个指针，指向一个Widget对象，对象在转递给函数的buffer里分配。当程序使用共享内存或memory-mapped I/O时这个函数可能有用，因为在这样程序里对象必须被放置在一个确定地址上或一块被例程分配的内存里  

这初看上去有些陌生，但是它是new操作符的一个用法，需要使用一个额外的变量（buffer），当new操作符隐含调用operator new函数时，把这个变量传递给它。被调用的operator new函数除了待有强制的参数size_t外，还必须接受void*指针参数，指向构造对象占用的内存空间。  

----

##operator delete

`void operator delete(void *memoryToBeDeallocated);`

----

这有一个隐含的意思是如果你只想处理未被初始化的内存，你应该绕过new和delete操作符，而调用operator new 获得内存和operator delete释放内存给系统：

    void *buffer = // 分配足够的
    operator new(50*sizeof(char)); // 内存以容纳50个char
    //没有调用构造函数
    ...
    operator delete(buffer); // 释放内存
    // 没有调用析构函数

> 这与在C中调用malloc和free等同

----

###operator new[]

`string *ps = new string[10];`

被使用的new仍然是new操作符，但是建立数组时new操作符的行为与单个对象建立有少许不同。第一是内存不再用operator new分配，代替以等同的数组分配函数，叫做operator new[]（经常被称为array new）。它与operator new一样能被重载。这就允许你控制数组的内存分配，就象你能控制单个对象内存分配一样  

----

###operator delete[]

同样当delete操作符用于数组时，它为每个数组元素调用析构函数，然后调用operator delete来释放内存  

就象你能替换或重载operator delete一样，你也替换或重载operator delete[]。  

----

###与malloc&free


####malloc

malloc()到底从哪里得到了内存空间？答案是从堆里面获得空间。也就是说函数返回的指针是指向堆里面的一块内存。操作系统中有一个记录空闲内存地址的链表。当操作系统收到程序的申请时，就会遍历该链表，然后就寻找第一个空间大于所申请空间的堆结点，然后就将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。  

####free

free()释放的是指针指向的内存！注意！释放的是内存，不是指针！这点非常非常重要！指针是一个变量，只有程序结束时才被销毁。释放了内存空间后，原来指向这块空间的指针还是存在！只不过现在指针指向的内容的垃圾，是未定义的，所以说是垃圾。因此，前面我已经说过了，释放内存后把指针指向NULL，防止指针在后面不小心又被解引用了。

更深层次来讲, free函数是将分配的这块内存与指针(malloc反悔的指针)之间的所有关系斩断, 指针变量中存储的地址也没有发生变化, 同时存储器中存储的内容也没有发生改变, **改变的只是指针对这快内存地址的所有权问题**. 但是该起始地址所在内存中的数据内容已经没法使用了,即时采用其他的指针也不能访问。此外, 由于指针变量中存储的地址值并没有改变, 由于指针没有对这个地址的访问权限, 程序中对指针的引用都可能导致错误的产生, 造成野指针, 因此最后还需要将指针指向NULL.

****

##explicit

> 总结：explicit   只对构造函数起作用，用来抑制隐式转换。

按照默认规定，只有一个参数的构造函数也定义了一个隐式转换，将该构造函数对应数据类型的数据转换为该类对象

    class String {
    String ( const char* p ); // 用C风格的字符串p作为初始化值
    //…
    }
    String s1 = “hello”; //OK 隐式转换，等价于String s1 = String（“hello”）;

但是有的时候可能会不需要这种隐式转换，如下：

    class String {
           String ( int n ); //本意是预先分配n个字节给字符串
    String ( const char* p ); // 用C风格的字符串p作为初始化值
    //…
    }

    String s4 = 10; //编译通过，也是分配10个字节的空字符串
    String s5 = ‘a’; //编译通过，分配int（‘a’）个字节的空字符串

> s4 和s5 分别把一个int型和char型，隐式转换成了分配若干字节的空字符串，容易令人误解。

----

为了避免这种错误的发生，我们可以声明显示的转换，使用explicit 关键字：

    class String {
           explicit String ( int n ); //本意是预先分配n个字节给字符串
    String ( const char* p ); // 用C风格的字符串p作为初始化值
    //…
    }

下面两种写法仍然正确：

    String s2 ( 10 );   //OK 分配10个字节的空字符串
    String s3 = String ( 10 ); //OK 分配10个字节的空字符串
 
下面两种写法就不允许了：

    String s4 = 10; //编译不通过，不允许隐式的转换
    String s5 = ‘a’; //编译不通过，不允许隐式的转换




****

##Virtual

##动态联编与静态联编

将源代码中的函数调用解释为执行特定的函数代码被称为函数名联编(binding).

1. 在编译过程中进行联编被称为静态联编(static binding),又称早期联编(early binding).它对函数的选择是根据基于对象的 指针或者引用来确定的。（即指针或者引用 指向哪个对象就调用哪个对象的相应的函数）
1. 编译器必须生成能够在程序运行时选择正确的虚方法的代码,这被称为动态联编(dynamic binding), 又称为晚期联编(late binding).

为使程序能够在运行阶段进行决策,必须采取一些方法来跟踪实际运行中基类指针或引用指向的对象类型,这增加了额外的开销.

例如,如果类不会用作基类,则不需要动态联编.同样,如果派生类不重新定义基类的任何方法,也不需要使用动态联编.

在这些情况下,使用静态联编更合理,效率也更高.由于静态联编的效率更高,因此被设置为C++的默认选择.

仅当程序设计确实 需要虚函数时,才使用它们.

> Strousstrup说,C++的指导原则之一是, 不要为不使用的我付出代价(内存或者处理时间).

----

##Virtual Function

编译器处理虚函数的方法是:给每一个对象添加一个隐藏成员.隐藏成员中保存了一个指向函数地址数组的指针.这种数组称为虚函数表(virtual function table, vtbl).虚函数表中存储了为类对象进行声明的虚函数的地址  

基类对象包含一个指针,访指针指向基类中所有虚函数地址表.派生类对象将包含一个指向独立地址表的指针.如果派生类提供了虚岁函数的新定义,访虚函数表将保存新函数的地址;如果派生类没有重新定义虚函数.该vtbl将保存函数原始版本的地址.如果派生类定义了新的虚函数,则该函数的地址也将被添加到vtbl中.注意,无论类中包含的虚函数是1还是10 个,都只需要在对象中添加1个地址成员,只是表的大小不同而已.  

调用虚函数时,程序将查看存储在对象中的vtbl地址,然后转向相应的函数地址表.如果使用类声明中定义的第一个虚函数,则程序将使用数组中的第一个函数地址,并执行具有该地址的函数.如果使用类声明中的第三个虚函数,程序将使用地址为数组中第三个元素的函数.  

简而言之,使用虚函数时, 在内存和执行速度方面有一定成本,包括:

1. 每个对象都将增大,增大量为存储地址的空间.
1. 对每个类,编译器都创建一个虚岁函数地址表.
1. 每个函数调用都有需要执行一步额外的操作,即到表中查找地址.

虽然非虚函数的效率比虚函数稍高,但不具备动态联编功能.

****

##struct

    struct tagMyStruct   
    {   
    　int iNum;   
    　long lLength;   
    };   


tagMyStruct称为“tag”，即“标签”，实际上是一个临时名字，struct 关键字和tagMyStruct一起，构成了这个结构类型

我们可以用struct tagMyStruct varName来定义变量，但要注意，使用tagMyStruct varName来定义变量是不对的，因为struct 和tagMyStruct合在一起才能表示一个结构类型。 

###位域

****

##extern

在C语言中，修饰符extern用在变量或者函数的声明前，用来说明“此变量/函数是在别处定义的，要在此处引用”。  

另外，extern也可用来进行链接指定。  

> 与extern对应的关键字是static，被它修饰的全局变量和函数只能在本模块中使用。因此，一个函数或变量只可能被本模块使用时，其不可能被extern “C”修饰。

##extern "C"

C++语言在编译的时候为了解决函数的多态问题，会将函数名和参数联合起来生成一个中间的函数名称，而C语言则不会，因此会造成链接时找不到对应函数的情况，此时C函数就需要用extern “C”进行链接指定，这告诉编译器，请保持我的名称，不要给我生成用于链接的中间函数名。  

C语言中不支持extern "C"声明，在.c文件中包含了extern "C"时会出现编译语法错误。


###extern "C" 使用要点
1. 可以是单一语句

        extern "C" double sqrt(double);

2. 可以是复合语句, 相当于复合语句中的声明都加了extern "C"

        extern "C"
        {
            double sqrt(double);
            int min(int, int);
        }

3.可以包含头文件，相当于头文件中的声明都加了extern "C"

        extern "C"
        {
            #include <cmath>
        }

4. 不可以将extern "C" 添加在函数内部
5. 如果函数有多个声明，可以都加extern "C", 也可以只出现在第一次声明中，后面的声明会接受第一个链接指示符的规则。
6. 除extern "C", 还有extern "FORTRAN" 等。


##extern 函数

如果函数的声明中带有关键字extern，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。即下述两个函数声明没有明显的区别：

当然，这样的用处还是有的，就是在程序中取代include “*.h”来声明函数，在一些复杂的项目中，我比较习惯在所有的函数声明前添加extern修饰。

----

##inline

在c++中，为了解决一些频繁调用的小函数大量消耗栈空间或者是叫栈内存的问题，特别的引入了inline修饰符，表示为内联函数。  

当编译器内联展开一个函数调用时，该函数的代码会被插入到调用代码流中（概念上类似于展开#define宏）。这能够改善性能（当然还有很多其它因素），因为优化器能够顺序集成(procedurally integrate)被调用代码，即将被调用代码直接优化进调用代码中。  

inline的使用是有所限制的，inline只适合函数体内代码简单的函数使用，不能包含复杂的结构控制语句例如while switch，并且不能内联函数本身不能是直接递归函数(自己内部还调用自己的函数)。 

###关于`#define`

说到这里我们不得不说一下在c语言中广泛被使用的#define语句，是的define的确也可以做到inline的这些工作，但是define是会产生副作用的，尤其是不同类型参数所导致的错误，由此可见inline有更强的约束性和能够让编译器检查出更多错误的特性，在c++中是不推荐使用define的。  

----

例1   
`#define   N   2+2`
`void main()`
`{`
`   int   a=N*N;`
`   printf(“%d”,a);`
`}`
(1) 出现问题：在此程序中存在着宏定义命令，宏N代表的字符串是2+2，在程序中有对宏N的使用，一般同学在读该程序时，容易产生的问题是先求解N为2＋2＝4，然后在程序中计算a时使用乘法，即N*N=4*4=16,其实该题的结果为8，为什么结果有这么大的偏差?
(2)问题解析：如1节所述，宏展开是在预处理阶段完成的，这个阶段把替换文本只是看作一个字符串，并不会有任何的计算发生，在展开时是在宏N出现的地方 只是简单地使用串2＋2来代替N，并不会增添任何的符号，所以对该程序展开后的结果是a=2+2*2+2，计算后=8，这就是宏替换的实质，如何写程序才 能完成结果为16的运算呢？
(3)解决办法：将宏定义写成如下形式

    #define   N   (2+2)
这样就可替换成(2+2)*(2+2)=16
2.2 带参数的宏定义出现的问题
在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般学生容易写成如下形式：

    #define   area(x)   x*x
这在使用中是很容易出现问题的，看如下的程序

    void main()
    {
        int   y=area(2+2);
        printf(“%d”,y);
    }
按理说给的参数是2+2，所得的结果应该为4*4=16，但是错了，因为该程序的实际结果为8，仍然是没能遵循纯粹的简单替换的规则，又是先计算再替换 了，在这道程序里，2+2即为area宏中的参数，应该由它来替换宏定义中的x，即替换成2+2*2+2=8了。那如果遵循(1)中的解决办法，把2+2 括起来，即把宏体中的x括起来，是否可以呢？#define   area(x) (x)*(x)，对于area(2+2)，替换为(2+2)*(2+2)=16，可以解决，但是对于area(2+2)/area(2+2)又会怎么样 呢，有的学生一看到这道题马上给出结果，因为分子分母一样，又错了，还是忘了遵循先替换再计算的规则了，这道题替换后会变为 (2+2)*(2+2)/(2+2)*(2+2)即4*4/4*4按照乘除运算规则，结果为16/4*4=4*4=16，那应该怎么呢？解决方法是在整个 宏体上再加一个括号，即#define   area(x) ((x)*(x))，不要觉得这没必要，没有它，是不行的。

----

和`#define`宏不同的是，内联函数总是对参数只精确地进行一次求值，从而避免了那声名狼藉的宏错误。换句话说，调用内联函数和调用正规函数是等价的，差别仅仅是更快  

和宏不同的，还有内联函数的参数类型被检查，并且被正确地进行必要的转换。  

###如何告诉编译器使非成员函数成为内联函数？

    inline
    void f(int i, char c)
    {
        // ...
    } 

----

###如何告诉编译器使一个成员函数成为内联函数？

    inline
    void Fred::f(int i, char c)
    {
        // ...
    } 

----

注意：将函数的定义（{...}之间的部分）放在头文件中是强制的，除非该函数仅仅被单个 .cpp 文件使用。尤其是，如果你将内联函数的定义放在 .cpp 文件中并且在其他 .cpp文件中调用它，连接器将给出 “unresolved external” 错误。  

----

###其它方法告诉编译器使成员函数成为内联

在类体内定义成员函数：

    class Fred {
    public:
        void f(int i, char c)
            {
              // ...
            }
    }; 

尽管这对于写类的人来说很容易，但由于它将类是“什么”(what)和类“如何”(how)工作混在一起，给阅读的人带来了困难。我们通常更愿意在类体外使用 inline 关键字定义成员函数来避免这种混合。  

----

###在定义于类外部的内联函数中，以下哪种方法最好：是把inline关键字放在类内部的成员函数声明前呢，还是放到类外部函数的定义前呢，还是两个地方都写？

最佳实践是：仅放在类外部函数的定义前。 

    class Foo {
    public:
        void method();  ← best practice: don't put the inline keyword here
        ...
    };
    
    inline void Foo::method()  ← best practice: put the inline keyword here
        { ... } 

这里是基本的想法：

- 类的public部分是你描述类的可见语义的地方，包含公有成员函数、友元函数和任何其它暴露给外部的内容。不要提供在调用者代码中看不到的细节。
- 类的其它部分，包括非公有部分、成员定义和友元函数声明等等，这些纯粹是实现细节。如果还没有在类的公有部分描述，那么不要提供相关可见语义。

回到内联上来：*一个函数是否内联只是实现细节*，不会改变函数调用的可见语义（即含义）。因此inline关键字应该和函数定义放在一起，而不是在类的public声明区。  

----

##预处理

###`#define`

`#define`命令是C语言中的一个宏定义命令，它用来将一个标识符定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。
该命令有两种格式：一种是简单的宏定义，另一种是带参数的宏定义。
1. 简单的宏定义：
    `#define`   <宏名>　　<字符串>
    `#define` PI 3.1415926
1. 带参数的宏定义
    `#define`   <宏名> (<参数表>)   <宏体>
    `#define`   A(x) x

一个标识符被宏定义后，该标识符便是一个宏名。这时，在程序中出现的是宏名，在该程序被编译前，先将宏名用被定义的字符串替换，这称为宏替换，替换后才进行编译，宏替换是简单的替换。

----

####特殊的`#define`

1. `#define Conn(x,y) x##y`

    `x##y`表示什么？表示x连接y
    `int n = Conn(123,456);`    结果就是n=123456;

1. `#define ToChar(x) #@x`

    `#@x`，其实就是给x加上单引号，结果返回是一个const char
    `char a = ToChar(1);`   结果就是a='1';

    > 但是如果你的参数超过四个字符，编译器就给给你报错了！error C2015: too many characters in constant   ：P

1. `#define ToString(x) #x`

    `char* str = ToString(123132);就成了str="123132";`

----

- #define xxx() ()
- #define xxx() {} //!多条语句大括号

    标准C支持的

- #define xxx() ({})

    GCC新增的功能，主要为了防止宏展开出现问题，默认展开时是要加上一个;的，容易出问题。
    > 最后一个式子的返回值作为宏函数的返回值。

----

###`#undef`

`#undef`是在后面取消以前定义的宏定义
该指令的形式为 `#undef 标识符`

----

###`#typedef`

Typedef 声明有助于创建平台无关类型，甚至能隐藏复杂和难以理解的语法。不管怎样，使用 typedef 能为代码带来意想不到的好处，通过本文你可以学习用 typedef 避免缺欠，从而使代码更健壮

typedef 声明，简称 typedef，为现有类型创建一个新的名字

　typedef 使用最多的地方是创建易于记忆的类型名，用它来归档程序员的意图。类型出现在所声明的变量名字中，位于 ''typedef'' 关键字右边。例如：`typedef int size;`   

----

记住：不管什么时候，只要为指针声明 typedef，那么都要在最终的 typedef 名称中加一个 const，以使得该指针本身是常量，而不是对象

    typedef const char * cpstr;   
    int mystrcmp(cpstr, cpstr); // 现在是正确的  

****

#Gcc

##Delaring Attributes of Functions

In GNU C, you can use function attributes to declare certain things about functions called in your program which help the compiler optimize calls and check your code more carefully. For example, you can use attributes to declare that a function never returns (noreturn), returns a value depending only on its arguments (pure), or has printf-style arguments (format). 

You can also use attributes to control memory placement, code generation options or call/return conventions within the function being annotated. Many of these attributes are target-specific. For example, many targets support attributes for defining interrupt handler functions, which typically must follow special register usage and return conventions. 

Function attributes are introduced by the __attribute__ keyword on a declaration, followed by an attribute specification inside double parentheses. You can specify multiple attributes in a declaration by separating them by commas within the double parentheses or by immediately following an attribute declaration with another attribute declaration. See Attribute Syntax, for the exact rules on attribute syntax and placement. 

GCC also supports attributes on variable declarations (see Variable Attributes), labels (see Label Attributes), enumerators (see Enumerator Attributes), statements (see Statement Attributes), and types (see Type Attributes). 

https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#Common-Function-Attributes

###alias

###aligned

###`nonnull(arg-index, ...)`

The nonnull attribute specifies that some function parameters should be non-null pointers. For instance, the declaration: 

    extern void *
    my_memcpy (void *dest, const void *src, size_t len)
            __attribute__((nonnull (1, 2)));

causes the compiler to check that, in calls to my_memcpy, arguments dest and src are non-null. If the compiler determines that a null pointer is passed in an argument slot marked as non-null, and the -Wnonnull option is enabled, a warning is issued. The compiler may also choose to make optimizations based on the knowledge that certain function arguments will never be null. 

If no argument index list is given to the nonnull attribute, all pointer arguments are marked as non-null. To illustrate, the following declaration is equivalent to the previous example: 

    extern void *
    my_memcpy (void *dest, const void *src, size_t len)
            __attribute__((nonnull));

****

#The GNU C Library

https://www.gnu.org/software/libc/manual/html_node/index.html#SEC_Contents

##Signal Handling

A signal is a software interrupt delivered to a process. The operating system uses signals to report exceptional situations to an executing program. Some signals report errors such as references to invalid memory addresses; others report asynchronous events, such as disconnection of a phone line.

The GNU C Library defines a variety of signal types, each for a particular kind of event. Some kinds of events make it inadvisable or impossible for the program to proceed as usual, and the corresponding signals normally abort the program. Other kinds of signals that report harmless events are ignored by default.

If you anticipate an event that causes signals, you can define a handler function and tell the operating system to run it when that particular type of signal arrives.

Finally, one process can send a signal to another process; this allows a parent process to abort a child, or two related processes to communicate and synchronize. 

----

##Basic Concepts of Signals

This section explains basic concepts of how signals are generated, what happens after a signal is delivered, and how programs can handle signals. 

- A program error such as dividing by zero or issuing an address outside the valid range.
- A user request to interrupt or terminate the program. Most environments are set up to let a user suspend the program by typing C-z, or terminate it with C-c. Whatever key sequence is used, the operating system sends the proper signal to interrupt the process.
- The termination of a child process.
- Expiration of a timer or alarm.
- A call to kill or raise by the same process.
- A call to kill from another process. Signals are a limited but useful form of interprocess communication.
- An attempt to perform an I/O operation that cannot be done. Examples are reading from a pipe that has no writer (see Pipes and FIFOs), and reading or writing to a terminal in certain situations (see Job Control). 

Each of these kinds of events (excepting explicit calls to kill and raise) generates its own particular kind of signal. The various kinds of signals are listed and described in detail in Standard Signals. 

----

###Concepts of Signal Generation

In general, the events that generate signals fall into three major categories: errors, external events, and explicit requests.

An error means that a program has done something invalid and cannot continue execution. But not all kinds of errors generate signals—in fact, most do not. For example, opening a nonexistent file is an error, but it does not raise a signal; instead, open returns -1. *In general, errors that are necessarily associated with certain library functions are reported by returning a value that indicates an error. The errors which raise signals are those which can happen anywhere in the program, not just in library calls. These include division by zero and invalid memory addresses*.

An external event generally has to do with I/O or other processes. These include the arrival of input, the expiration of a timer, and the termination of a child process.

An explicit request means the use of a library function such as kill whose purpose is specifically to generate a signal.

Signals may be generated synchronously or asynchronously. A synchronous signal pertains to a specific action in the program, and is delivered (unless blocked) during that action. Most errors generate signals synchronously, and so do explicit requests by a process to generate a signal for that same process. On some machines, certain kinds of hardware errors (usually floating-point exceptions) are not reported completely synchronously, but may arrive a few instructions later.

Asynchronous signals are generated by events outside the control of the process that receives them. These signals arrive at unpredictable times during execution. External events generate signals asynchronously, and so do explicit requests that apply to some other process.

A given type of signal is either typically synchronous or typically asynchronous. For example, signals for errors are typically synchronous because errors generate signals synchronously. But any type of signal can be generated synchronously or asynchronously with an explicit request. 

----

###How Signals Are Delivered

When a signal is generated, it becomes pending. Normally it remains pending for just a short period of time and then is delivered to the process that was signaled. However, if that kind of signal is currently blocked, it may remain pending indefinitely—until signals of that kind are unblocked. Once unblocked, it will be delivered immediately. See Blocking Signals.

*When the signal is delivered, whether right away or after a long delay, the specified action for that signal is taken*. For certain signals, such as `SIGKILL` and `SIGSTOP`, the action is fixed, but for most signals, the program has a choice: ignore the signal, specify a handler function, or accept the default action for that kind of signal. The program specifies its choice using functions such as `signal` or `sigaction` (see Signal Actions). We sometimes say that a handler catches the signal. *While the handler is running, that particular signal is normally blocked*.

If the specified action for a kind of signal is to ignore it, then any such signal which is generated is discarded immediately. This happens even if the signal is also blocked at the time. A signal discarded in this way will never be delivered, not even if the program subsequently specifies a different action for that kind of signal and then unblocks it.

If a signal arrives which the program has neither handled nor ignored, its default action takes place. Each kind of signal has its own default action, documented below (see Standard Signals). For most kinds of signals, the default action is to terminate the process. For certain kinds of signals that represent “harmless” events, the default action is to do nothing.

When a signal terminates a process, its parent process can determine the cause of termination by examining the termination status code reported by the `wait` or `waitpid` functions. (This is discussed in more detail in Process Completion.) The information it can get includes the fact that termination was due to a signal and the kind of signal involved. If a program you run from a shell is terminated by a signal, the shell typically prints some kind of error message.

*The signals that normally represent program errors have a special property: when one of these signals terminates the process, it also writes a core dump file which records the state of the process at the time of termination*. You can examine the core dump with a debugger to investigate what caused the error.

If you raise a “program error” signal by explicit request, and this terminates the process, it makes a core dump file just as if the signal had been due directly to an error. 

----

##Defining Signal Handlers

This section describes how to write a signal handler function that can be established with the `signal` or `sigaction` functions.

A signal handler is just a function that you compile together with the rest of the program. Instead of directly invoking the function, you use `signal` or `sigaction` to tell the operating system to call it when a signal arrives. This is known as establishing the handler. See Signal Actions.

There are two basic strategies you can use in signal handler functions:

1. You can have the handler function note that the signal arrived by tweaking some global data structures, and then return normally.
1. You can have the handler function terminate the program or transfer control to a point where it can recover from the situation that caused the signal. 

You need to take special care in writing handler functions because they can be called asynchronously. That is, a handler might be called at any point in the program, unpredictably. If two signals arrive during a very short interval, one handler can run within another. This section describes what your handler should do, and what you should avoid. 

----

###Signal Handlers that Return

Handlers which return normally are usually used for signals such as `SIGALRM` and the I/O and interprocess communication signals. But a handler for SIGINT might also return normally after setting a flag that tells the program to exit at a convenient time. 

It is not safe to return normally from the handler for a program error signal, because the behavior of the program when the handler function returns is not defined after a program error. See Program Error Signals.

*Handlers that return normally must modify some global variable in order to have any effect*. Typically, the variable is one that is examined periodically by the program during normal operation. Its data type should be sig_atomic_t for reasons described in Atomic Data Access. 

Here is a simple example of such a program. It executes the body of the loop until it has noticed that a SIGALRM signal has arrived. This technique is useful because it allows the iteration in progress when the signal arrives to complete before the loop exits. 

    #include <signal.h>
    #include <stdio.h>
    #include <stdlib.h>
    
    /* This flag controls termination of the main loop. */
    volatile sig_atomic_t keep_going = 1;
    
    /* The signal handler just clears the flag and re-enables itself. */
    void
    catch_alarm (int sig)
    {
      keep_going = 0;
      signal (sig, catch_alarm);
    }
    
    void
    do_stuff (void)
    {
      puts ("Doing stuff while waiting for alarm....");
    }
    
    int
    main (void)
    {
      /* Establish a handler for SIGALRM signals. */
      signal (SIGALRM, catch_alarm);
    
      /* Set an alarm to go off in a little while. */
      alarm (2);
    
      /* Check the flag once in a while to see when to quit. */
      while (keep_going)
        do_stuff ();
    
      return EXIT_SUCCESS;
    }

> The `signal()` function defines the handling of the next received signal only, after which the default handling is reinstated.

----

###Handlers That Terminate the Process

Handler functions that terminate the program are typically used to cause orderly cleanup or recovery from program error signals and interactive interrupts. 

*The cleanest way for a handler to terminate the process is to raise the same signal that ran the handler in the first place*. Here is how to do this: 

    volatile sig_atomic_t fatal_error_in_progress = 0;
    
    void
    fatal_error_signal (int sig)
    {
    
      /* Since this handler is established for more than one kind of signal, 
         it might still get invoked recursively by delivery of some other kind
         of signal.  Use a static variable to keep track of that. */
      if (fatal_error_in_progress)
        raise (sig);
      fatal_error_in_progress = 1;
    
    
      /* Now do the clean up actions:
         - reset terminal modes
         - kill child processes
         - remove lock files */
      …
    
    
      /* Now reraise the signal.  We reactivate the signal’s
         default handling, which is to terminate the process.
         We could just call exit or abort,
         but reraising the signal sets the return status
         from the process correctly. */
      signal (sig, SIG_DFL);
      raise (sig);
    }

----

###Nonlocal Control Transfer in Handlers

You can do a nonlocal transfer of control out of a signal handler using the `setjmp` and `longjmp` facilities (see Non-Local Exits).

When the handler does a nonlocal control transfer, the part of the program that was running will not continue. If this part of the program was in the middle of updating an important data structure, the data structure will remain inconsistent. Since the program does not terminate, the inconsistency is likely to be noticed later on.

There are two ways to avoid this problem. 
1. One is to block the signal for the parts of the program that update important data structures. Blocking the signal delays its delivery until it is unblocked, once the critical updating is finished. See Blocking Signals.
1. The other way is to re-initialize the crucial data structures in the signal handler, or to make their values consistent. 

    #include <signal.h>
    #include <setjmp.h>
    
    jmp_buf return_to_top_level;
    
    volatile sig_atomic_t waiting_for_input;
    
    void
    handle_sigint (int signum)
    {
      /* We may have been waiting for input when the signal arrived,
         but we are no longer waiting once we transfer control. */
      waiting_for_input = 0;
      longjmp (return_to_top_level, 1);
    }
    
    
    int
    main (void)
    {
      …
      signal (SIGINT, sigint_handler);
      …
      while (1) {
        prepare_for_command ();
        if (setjmp (return_to_top_level) == 0)
          read_and_execute_command ();
      }
    }
    
    
    /* Imagine this is a subroutine used by various commands. */
    char *
    read_data ()
    {
      if (input_from_terminal) {
        waiting_for_input = 1;
        …
        waiting_for_input = 0;
      } else {
        …
      }
    }

----

###Signals Arriving While a Handler Runs

What happens if another signal arrives while your signal handler function is running?

When the handler for a particular signal is invoked, that signal is automatically blocked until the handler returns. *That means that if two signals of the same kind arrive close together, the second one will be held until the first has been handled*. (The handler can explicitly unblock the signal using sigprocmask, if you want to allow more signals of this type to arrive; see Process Signal Mask.)

However, your handler can still be interrupted by delivery of another kind of signal. To avoid this, you can use the `sa_mask` member of the action structure passed to sigaction to explicitly specify which signals should be blocked while the signal handler runs. These signals are in addition to the signal for which the handler was invoked, and any other signals that are normally blocked by the process. See Blocking for Handler.

When the handler returns, the set of blocked signals is restored to the value it had before the handler ran. So using `sigprocmask` inside the handler only affects what signals can arrive during the execution of the handler itself, not what signals can arrive once the handler returns.

> Portability Note: Always use `sigaction` to establish a handler for a signal that you expect to receive asynchronously, if you want your program to work properly on System V Unix. On this system, the handling of a signal whose handler was established with signal automatically sets the signal’s action back to `SIG_DFL`, and the handler must re-establish itself each time it runs. This practice, while inconvenient, does work when signals cannot arrive in succession. However, *if another signal can arrive right away, it may arrive before the handler can re-establish itself*. Then the second signal would receive the default handling, which could terminate the process. 

----

###Signals Close Together Merge into One

****

#设计模式

##RAII

RAII(Resource acquisition is initialization)资源获取即初始化,它是一项很简单的技术,利用C++对象生命周期的概念来控制程序的资源,最简单的RAII形式是,创建这样一个对象:其构造函数获取一份资源,而析构函数则释放这份资源:

    Class Resource {……};
    Class ResourceHandle {
    Public:
    Explicit Resourcehandle (Resource * aResource ):r_( aResource ) //获取资源
    ~ ResourceHandle() {delete r_;} //释放资源
    Resource *get()    {return r_ ;} //访问资源
       Private:
         ResourceHandle (const ResourceHandle &);
    ResourceHandle & operator = (const ResourceHandle &);
         Resource * r_;
    }

----

ResourceHandle对象的最美妙之处在于,若它被声明为一个函数的局部变量,或作为函数的参数,或是一个静态对象,我们都可以保证析构函数会得到调用,从而释放对象所引用的资源.

----

###RAII与STL容器

STL容器是基于值语义的，在容器内部，对象是常被复制的。如果RAII类型需要存入STL容器，需要作一些处理  

    class Resource   
    {   
    public:   
    Resource() {/*分配资源*/}   
    ~ Resource() {/*释放资源*/}   
    private:   
    int handle;   
    };   
    std::map< Identifier, Resource > resourceMap;  

> 以上代码中STL容器对Resource的复制将导致运行期错误.

----


最好的方法是让RAII类型继承于boost::noncopyable[2]，而后在容器中使用引用计数的指针  

    class Resource : public boost::noncopyable   
    {   
    public:   
    Resource() {/*分配资源*/}   
    ~ Resource() {/*释放资源*/}   
    private:   
    int handle;   
    };   
    typedef boost::shared_ptr<Resource> PointerToResourceType;   
    typedef std::map< Identifier, PointerToResourceType> ResourceMapType;   
    ResourceMapType resourceMap;  

> 作为替代，还可以使用非拷贝行为的容器：boost::ptr_map<Identifier,Resource> map;

****

#C Standard library:STL

##<errno.h>/<cerrno>

errno.h 是C语言C标准函式库里的标头档，定义了通过错误码来回报错误资讯的宏：  
errno宏定义为一个int型态的左值, 包含任何函式使用errno功能所产生的上一个错误码。  

----

##<stdio.h>/<cstdio>

###printf

####转换说明符 

- `%a`      浮点数、十六进制数字和p-记数法（Ｃ９９）  
- `%A`　　　浮点数、十六进制数字和p-记法（Ｃ９９）  
- `%c`　　　一个字符　  
- `%d`　　　有符号十进制整数　  
- `%e`　　　浮点数、e-记数法  
- `%E`　　　浮点数、Ｅ-记数法  
- `%f`　　　浮点数、十进制记数法　　  
- `%g`　　　根据数值不同自动选择％f或％e．  
- `%G`　　　根据数值不同自动选择％f或％e.  
- `%i`      有符号十进制数（与％d相同）  
- `%o`　　　无符号八进制整数  
- `%p`　　　指针　　　　  
- `%s`　　　字符串  
- `%u`　　　无符号十进制整数  
- `%x`　　　使用十六进制数字０f的无符号十六进制整数　  
- `%X`　　　使用十六进制数字０f的无符号十六进制整数  
- `%%`　　　打印一个百分号  
- `%n`      The corresponding argument must be a pointer to a signed int.

        `sscanf(str, "0x%x%n", &a, &b);`
        `printf("blah %n blah \n", &val); printf("val=%d\n", val);`

----

####长度修饰符 

常用的长度修饰符有两种：

1. l（长）表示按长整型量输出
1. h（短）表示按短整型量输出。

> 可以和输出转换说明符d、f、u等连用

----

####宽度修饰符和精度修饰符 

宽度修饰符用来指定printf（）函数输出数据的占位宽度，用一个十进制整数表示输出数据的位数，插在百分号%与转换说明符之间，其作用是控制打印数据的宽度，也称为“域宽”。

也可以在prinf函数中指定输出数据的精度。以一个小数点开始，后紧跟着一个十进制整数表示精度，插在百分号%与转换说明符之间。对于不同数据类型，精度的含义也不相同：在使用%d时，精度表示最少要打印的数字的个数。在使用%f、%e、%E时，精度是小数点后面显示的数字个数。在使用%s时，精度表示输出的字符串中字符的个数。


1. %md

    以宽度m输出整型数，不足m位数时左侧补以空格。 

1. %0md

    以宽度m输出整型数，不足m位数时左侧补以0（零）。 

1. %m.nf

    以宽度m输出实型数，小数位数为n位。 

1. %ms

    以宽度m输出字符串，不足m位数时左侧补以空格。 

1. %m.ns

    以宽度m输出字符串左侧的n个字符，不足m位数时左侧补以空格。

----

####标志修饰符 

在printf 函数中，可以使用标志修饰符控制输出格式。

- `-`

    “左对齐”方式：输出数据左对齐，右侧补空格。缺省时输出数据则为右对齐，左补格。 

- `+`

    输出数据为正时，在数据之前显示一个+号，为负时，在数据之前显示一个-号。 

- `#`

    输出数据为八进制时加前缀0，为十六进制时前缀0x。 

- `空格`

    输出数据为正值时，在数据之前打印空格，为负时，数据之前显示一个-号。

----




##<memory>

###auto_ptr

auto_ptr是这样一种指针：它是“它所指向的对象”的拥有者。这种拥有具有唯一性，即一个对象只能有一个拥有者，严禁一物二主。当auto_ptr指针被摧毁时，它所指向的对象也将被隐式销毁，即使程序中有异常发生，auto_ptr所指向的对象也将被销毁。

----

关于auto_ptr的几种注意事项：

1. auto_ptr不能共享所有权。
2. auto_ptr不能指向数组
3. auto_ptr不能作为容器的成员。
4. 不能通过赋值操作来初始化auto_ptr

        std::auto_ptr<int> p(new int(42));     //OK
        std::auto_ptr<int> p = new int(42);    //ERROR
    这是因为auto_ptr构造函数被定义为explicit

5. 不要把auto_ptr放入容器

> 智能指针通过RAII来确保内存资源的安全，也间接地使得对象上的RAII得到实施

> 这里的RAII并不是十分严格：对象（所占的内存也是资源）的创建（资源获取）是在构造函数之外进行的。广义上，我们也把它划归RAII范畴。

> Matthew Wilson在《Imperfect C++》一书中，将其独立出来，称其为RRID（Resource Release Is Destruction）。

----

auto_ptr对象间的赋值是一个需要特别注意的地方。简单说来资源代理对象间赋值的语义不满足“赋值相等”，其语义是资源管理权的转移。

    int a;  int b = 10;  a = b; //这句话执行后 a == b 但对于资源代理对象，这是不满足的，比如：
    auto_ptr<int> a(null);  auto_ptr<int> b(new int(123));  a = b; //这句话执行后a != b，赋值的语义是b把资源的管理权交给了a 

****


