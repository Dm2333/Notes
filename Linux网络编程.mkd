##概论

##网络的历史
通信的两种方式:

1. 有形介质
1. 无形介质

----

- 1969年,ARPA,美国国防部高级研究计划局
- 1975年,Ethernet,Xerox公司与剑桥大学,是LAN的代表
- Novel LAN与Microsoft LAN两份天下
- 70年代,美国国防部提出TCP/IP
- 国际标准化组织ISO,提出OSI/RM(开放系统互连七层协议的参考模型)

----

##OSI模型
1. Physical
1. Data Link
1. NetWork
1. Transport
1. Session
1. Presentation
1. Application

----

![OSI层次图](./img/Linux网络编程/OSI层次图.PNG)

----

##Internet体系模型

![TCP/IP网络体系结构](./img/Linux网络编程/TCPIP网络体系结构.PNG)

----

Internet IP 地址有三种基本类型：

1. A类地址

    其 W 的高端位为 0，允许有 126 个 A 类地址，分配给拥有大量主机的网络。

1. B类地址

    由 W.X 表示网络 ID，其高端前二位为二进制的 10，它用于分配中等规模的网络，可有**16384(64\*256)**个 B 类地址。

1. C类地址

    其高端前三位为二进制 110，允许大约**200万(32\*256*256)**个 C 类地址，每个网络只有 254 个主机，用于小型的局域网。

----

##客户/服务器模型

----

##Unix历史

----

##Linux的发展

----

##Linux和Unix的发展

****

#Unix/Linux模型

##Unix/Linux基本结构

外层的程序，诸如 shell 及编辑程序（vi ） ，是通过引用一组明确定义的系统调用而与内核交互的。这些系统调用通知内核为调用程序做各种操作，并在内核与调用程序之间交换数据。  

然而， 它们最终都使用由内核提供的底层服务， 并通过系统调用 （SystemCall ）的集合利用这些服务。系统调用的集合及其实现系统调用的内部算法形成了内核的主体。简言之，内核提供了 UNIX/Linux 系统全部应用程序所依赖的服务，并且内核的定义了这些服务  

![Unix内核结构](./img/Linux网络编程/Unix内核结构)

----

我们看到了三个层次：用户、内核及硬件。  

系统调用看起来象 C 程序中普通的函数调用，而库把这些函数调用映射成进入操作系统所需要的源语。然而，汇编语言程序可以不经过系统调用库而直接引用系统调用。程序常常使用像标准 I/O 库这样一些其它的库程序以提供对系统调用的更高级的使用。由于在编译期间把这些库连接到程序上，因此，以这里的观点来说，这些库是用户程序的一部分。  

系统调用的集合分成与文件子系统交互作用的部分及与进程控制子系统交互作用的部分。  

文件子系统管理文件，其中包括分配文件空间，管理空闲空间，控制对文件的存取，以及为用户检索数据。

进程通过一个特定的系统调用集合，比如通过系统调用open,close,read,write,stat,chown 以及 chmod 等与文件子系统交互。  

----


