#Feedback Assessments

FA1: write a one-page summary of what cloud computing is, and why it is significant. Format your summary as follows: no more than one side of A4-sized paper with text sized no smaller than 11-point font, and one-inch (25mm) margins at top, bottom, left, and right of the page. It should be possible to write this summary after you have attended the first lecture; you can work from your notes on the first lecture, but you should feel free to include additional material not covered in that lecture if you feel it is appropriate to do so. The aim of this assessment is to give you practice at writing to a word-limit, and to identify any problems or issues with your writing style. The deadline for submission of Feedback 1 is Friday 17th October, 2014. (We will do our best to release FA1 marks and feedback by/on Friday 7th November.)

FA2: write a one-page "Extended Abstract" describing what you propose to do, and expect to achieve or demonstrate, in your cloud-computing programming project. As with your final 8-page paper, what you submit should be formatted according to the A4 page-layout requirements for international peer-reviewed technical conferences organized by the IEEE: see http://www.ieee.org/conferences_events/conferences/publishing/templates.html

The aim of this assessment is to ensure that you have a realistic plan for your programming project, that you can clearly describe the project and why it is interesting, and that you can submit work in the required format. Deadline for submission of Feedback 2 is Friday 31st October, 2014. (We will do our best to release FA2 marks and feedback by/on Friday 21st November.) 

#Lecture 4 Programming Project

recommended to limit yourself to the free-tier services available from Google App Engine.

individual or in a group of two or three( the same grade will be given to all student in that group)

Deadline for submission of your final paper is *Friday January 9th, 2015.*

----

should be run online at APP_URL

The URL mustbe live, no 404 errors. 

Penalty for no URL in abstract, or URL not found: ZERO MARKS 

- Don’t submit source code or ZIP files, we just want the PDF of your paper.
- The PDF of your paper should be self-contained, like an academic paper.
- But DO keep your source code: we may ask to see it later! 

----

##Planning your time

Excepted to take c.48 hours( six 8-hour day)

*It would be unwise to be overambitious (NB 8 pages is a maximum)*

**It’s OK to submit a paper describing a complete design that is not fully implemented**

----

##Example 1

Simple photo-sharing site like a mini Flickr, Picassa, or Blipfoto ( or: upload & share interesting links like [delicious.com](http://www.delicious.com/)

Users can browse other users' photos and add comments 

----

##Example 2

Cloud-based storage/backup for pro photographers, a la Dropbox

- Photographer returns from shoot, uploads from camera to folder on PC 
- App copies all newfiles in folder to cloud storage 
- While copying, App does housekeeping:
	- De-duplication (don’t store the same file twice) 
	- Database (record of what is stored and where; “library”) 
	- Creation of thumbnails at various sizes (“contact sheet”) 

----

##Marking Scheme

Actually that percentage is calculated from a score out of 20.  

You’re scored on four criteria, each on a scale of 0 to 5:  

    1. Structure of the paper and quality/coherence of the text; 
    1. Use of diagrams/figures/graphs/illustrations; 
    1. Challenge/originality/novelty of the cloud-based system; 
    1. Extent to which cloud scale-out issues are explored/explained/addressed. 

NB on point (4), Google have a tutorial page on load-testing GAE apps… 

##Best submissions

###Lyrical - 37775

Lyrical is an application which allows people to share their favourite lines of a song, together with a music clip containing those lines.

hosted on GAE, written in Python using the webapp2 framework and Jinja2 templating language.

1. Allows users to share their favouritelines from songs, along with the corresponding segment of the song’s audio file, and to comment on their and other users’ posts.
1. Nice explanatory discussion of database/datastore implementation issues, how it builds on lower-level technology like Bigtable(discussed more in Lecture 8).
1. Nice illustration of using Google’s elementary load-testing to get some data on scale-out performance.

----

###Mashine Application for the Cloud - Miranda Aperghis, Rob Lloyd, Kathryn Webb

Allows users to upload multiple music tracks and then intelligently blend/mix them to create a mash / mashup.  Audio clips limited to 30 seconds, potential use as phone ringtone or as Vine backing music. 

1. Good discussion of design/development trade-offs between AWS vsGAE (they chose AWS).
1. This is a minimal proof-of-concept but lots of potential for expansion, and well-suited to the time available.

----

###FFT Oceans: Ocean Simulation in the Cloud - Alex Gulliver

Creates polygon-mesh models and renderings of ocean seas via a third-party accurate parameterized model: user enters key parameters, app produces nframes of model/ render – “embarassinglyparallel” 

1. Nice example app for using GAE’s Datastore, Memcache, & Blobstore.
1. Paper is only 5 pages long: it says all it needs to.  App can be run from here: [FFT Oceans](http://fft-oceans.appspot.com/)

----

###Find My Friend - Andrew Haslam
A hidden-object game (on GAE) where the objects are the faces of your FaceBookfriends, hidden (via faceidentification and clever rendering) in photos of crowds.  The game adapts over time via player feedback.

1. Really nice use of diagrams/figures to illustrate operation.
1. Novel, challenging idea, a lot of work but good use of preexisting code: ambitious scope and could easily be extended to a final-year project.

----

###Dictastream - a cloud based Dictaphone and audio editor - Jamie Henson, Rob Briggs, Ioana Madalina Patrichi

App for recording audio, annotating, and editing.  Annotations are notes, the intended use case being undergrads recording lectures! Android app as front end. 

1. Used AWS because GAE didn’t offer all the functionality they required: primarily SoXopen-source audio processing suite written in C. 
1. Good testing/evaluation including economic impact assessment: costingsof operating the service. 

----

###bubl: A Cloud-Based Photo Sharing, Rating and Filtering Service - David Timms

Very close to Example 1, runs on GAE, and interfaces with Imgur online image-hosting service.

1. Nice discussions of scalability, of robustness, and of performance testing
1. App still live on GAE: [bubl](bubl-app.appspot.com) (But no longer running as it was?) 

----

###Latexify: A plaintext to LaTeX converter in the cloud - Gianluca di Maggio, Daniel Lamb, Francis Hart

SaaS: upload plain text, choose some options, get back a LaTeXsource and the rendered PDF. Added social networking functions: lists of friends with whom user can share files; also Dropboxlinks. 

1. Uses AWS: EC2, S3, SQS, SimpleDB. IoSfront end.
1. Good discussions of scalability and security aspects, lots of proposals for additional work. 

[Latexify promo video](https://vimeo.com/83872949)

----

##Dave’s eight top tips on writing

1. Tip 1: Write for an Audience
1. Tip 2: Say what you want to say

    1. Tell them what you're going to say
    1. Say it
    1. Tell them what you just said

1. Tip 3: Remember the reader
1. Tip 4: Improve it by not working on it 
1. Tip 5: Don’t plagiarise 
1. Tip 6: Write like a grown-up, not a schoolkid 
1. Tip 7: Get the basics right 
1. Tip 8: Use figures sensibly 

----

FA2: write a one-page "Extended Abstract" describing what you propose to do, and expect to achieve or demonstrate, in your cloud-computing programming project. As with your final 8-page paper, what you submit should be formatted according to the A4 page-layout requirements for international peer-reviewed technical conferences organized by the IEEE: see http://www.ieee.org/conferences_events/conferences/publishing/templates.html

The aim of this assessment is to ensure that you have a realistic plan for your programming project, that you can clearly describe the project and why it is interesting, and that you can submit work in the required format. Deadline for submission of Feedback 2 is Friday 31st October, 2014.

----

##Submitting Assessments 

Submission of all assessments (feedback assessments and formal coursework) is online via SAFE, as PDF files only. 

Please give your files unique names – use your candidate number in the filename (otherwise I get 90 files all called “essay.pdf”) e.g.: 
    - FA1_7654321.PDF 
    - FA2_7654321.PDF 
    - CW1_7654321.PDF 

Please make sure that your candidate number is clearly on the first page of each PDF file too.

****





































