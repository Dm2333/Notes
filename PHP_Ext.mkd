


#PHP扩展开发及内核应用
http://www.walu.cc/phpbook/preface.md

#PHP的生命周期

##让我们从SAPI开始

我们平时接触的最多的是web模式下的php，当然你也肯定知道php还有个CLI模式。 其实无论哪种模式，PHP的工作原理都是一样的， 都是作为一种SAPI在运行（Server Application Programming Interface： the API used by PHP to interface with Web Servers）。当我们在终端敲入php这个命令时候，它使用的是"command line sapi"！它就像一个mimi的web服务器一样来支持php完成这个请求，请求完成后再重新把控制权交给终端。

简单来说, SAPI就是PHP和外部环境的代理器。它把外部环境抽象后, 为内部的PHP提供一套固定的, 统一的接口, 使得PHP自身实现能够不受错综复杂的外部环境影响，保持一定的独立性

##PHP的启动与终止

PHP程序的启动可以看作有两个概念上的启动，终止也有两个概念上的终止。 其中一个是PHP作为Apache(拿它举例，板砖勿扔)的一个模块的启动与终止， 这次启动php会初始化一些必要数据，比如与宿主Apache有关的，并且这些数据是常驻内存的！ 终止与之相对。 还有一个概念上的启动就是当Apache分配一个页面请求过来的时候，PHP会有一次启动与终止，这也是我们最常讨论的一种。

##PHP的生命周期

一个PHP实例，无论是从init脚本中调用的，还是从命令行启动的，都会向我们上一节说的那样， 依次进行Module init、Request init、Request Shutdown、Module shutdown四个过程， 当然之间还会执行脚本自己的逻辑。 那么两种init和两种shutdown各会执行多少次、各自的执行频率有多少呢？ 这取决与PHP是用什么sapi与宿主通信的。最常见的四种方式如下所列：

1. 直接以CLI/CGI模式调用
1. 多进程模块
1. 多线程模
1. Embedded(嵌入式，在自己的C程序中调用Zend Engine)


##PHP的生命周期

在PHP初期，是作为单进程的CGI来运行的，所以并没有考虑线程安全问题。 我们可以随意的在全局作用域中设置变量并在程序中对他进行修改、访问，内核申请的资源如果没有正确的释放， 也会在CGI进程结束后自动地被清理干净。

后来，php被作为apache多进程模式下的一个模块运行，但是这仍然把php局限在一个进程里， 我们设置的全局变量，只要在每个请求之前将其正确的初始化，并在每个请求之后正确的清理干净， 便不会带来什么麻烦。由于对于一个进程来说，同一个时间只能处理一个请求， 所以这是内核中加入了针对每个请求的内存管理功能，来防止服务器资源利用出现错误。

随着使用在多线程模式的软件系统越来越多，php内核中亟需一种新的资源管理方式， 并最终在php内核中形成了一个新的抽象层：TSRM(Thread Safe Resource Management)。

###线程安全与非线程安全

在一个没有线程的程序中，我们往往倾向于把全局变量声明在源文件的顶部， 编辑器会自动的为它分配资源供我们在声明语句之下的程序逻辑中使用。

但是在一个多线程的程序中，如果我们需要每个线程都拥有自己独立的资源的话， 便需要为每个线程独立开辟出一个区域来存放它们各自的资源， 在使用资源的时候，每个线程便会只在自己的那一亩三分地里找，而不会拔了别人的庄稼。

###Thread-Safe Data Pools(线程安全的资源池？)

在扩展的Module Init里，扩展可以调用ts_allocate_id()来告诉TRSM自己需要多少资源。 TRSM接收后更新系统使用的资源，并得到一个指向刚分配的那份资源的id。

    typedef struct {
        int sampleint;
        char *samplestring;
    } php_sample_globals;
    int sample_globals_id;
     
    PHP_MINIT_FUNCTION(sample)
    {
        ts_allocate_id(&sample_globals_id,
            sizeof(php_sample_globals),
            (ts_allocate_ctor) php_sample_globals_ctor,
            (ts_allocate_dtor) php_sample_globals_dtor);
        return SUCCESS;
    }

当一个请求需要访问数据段的时候，扩展从TSRM层请求当前线程的资源池， 以ts_allocate_id()返回的资源ID来获取偏移量。 换句话说，在代码流中，你可能会在前面所说的MINIT语句中碰到SAMPLE_G(sampleint) = 5; 这样的语句。在线程安全的构建下，这个语句通过一些宏扩展如下：

    (((php_sample_globals*)(*((void ***)tsrm_ls))[sample_globals_id-1])->sampleint = 5;

如果你看不懂上面的转换也不用沮丧，它已经很好的封装在PHPAPI中了，以至于许多开发者都不需要知道它怎样工作的。

###当不在线程环境时

因为在PHP的线程安全构建中访问全局资源涉及到在线程数据池查找对应的偏移量，这是一些额外的负载，结果就是它比对应的非线程方式（直接从编译期已经计算好的真实的全局变量地址中取出数据）慢一些。 考虑上面的例子，这一次在非线程构建下：

****

#PHP变量在内核中的实现

所有的编程语言都要提供一种数据的存储与检索机制，PHP也不例外。其它语言大都需要在使用变量之前先定义，并且它的类型也是无法再次改变的，而PHP却允许程序猿自由的使用变量而无须提前定义，甚至可以随时随意的对已存在的变量转换成其它任何PHP支持的数据类型。在程序在运行的时候，PHP还会自动的根据需求转换变量的类型。

我认为阅读本书的人都已经是标准的PHP程序猿了，所以你们也肯定体验过PHP的弱类型的变量体系。众所周知，PHP引擎是用C写的，而C确实一种强类型的编程语言，PHP内核中是如何用C来实现自己的这种弱类型特性的，你将在本章中找到答案！

##变量的类型


#References

#PHP代码如何被执行？ 

众所周知，计算机的CPU只能执行二进制的机器码，每种CPU都有对应的汇编语言，汇编语言编译器将汇编语言翻译成二进制的机器语言，然后CPU开始执行这些机器码。汇编语言作为机器语言与程序设计者之间的一个层，给我们带来了很多方便，程序员不需要用晦涩的01数字来书写程序.

当然人们并不满足这样的一个进步，于是在汇编语言之上又多了一个层-C语言，C语言更贴近人类熟悉的“自然语言”，程序设计者可以通过C语言编译器将C源代码文件编译成目标文件（二进制文件，中间会先翻译成汇编语言，然后由汇编语言生成机器码），然后将各个目标文件连接在一起就组成了一个可执行文件。正如有人说过的一句名言“计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决”（“Any problem in computer science can be solved by another layer of indirection.”） 

PHP语言就是在C语言之上的一个层，PHP引擎是由C语言来实现的，因此PHP语言这一个在C之上抽象出来的层使用起来比C更简单方便，入门门槛更低。

PHP语言到C语言之间的转换如果使用“翻译”这个词是不够准确的，因为引擎不是将PHP语言转换成C语言，然后将转换后的C语言编译链接执行。引擎在解析PHP代码的时候通常是分为两个部分，编译和执行：

1. 编译阶段：引擎把PHP代码转换成op code中间代码
1. 执行阶段：引擎解释并执行编译阶段产生的op code

关于op code会有专门的文章来介绍，现在网络上也已经有很多相关内容的文章，总之PHP代码会被编译成_zend_op_array的形式，这是一个结构体，其中包括很多相关属性，以及最重要的成员zend_op *opcodes, 即opcode的数组。执行阶段引擎会按照顺序执行各个opcode。

目前5.3.2版本的PHP中，opcode一共有154种，可以在{PHPSRC}/Zend/zend_vm_opcodes.h看到这些opcode的宏定义。op的结构定义为:

    struct _zend_op {
        opcode_handler_t handler;
        znode result;
        znode op1;
        znode op2;
        ulong extended_value;
        uint lineno;
        zend_uchar opcode;
    };



其中的成员opcode就对应154个opcode宏定义中的一个，每一个op根据opcode和操作数的类型不同都会对应一个相关的执行句柄(opcode_handler_t handler),执行句柄是一个函数指针，op的执行执行句柄都定义在{PHPSRC}/Zend/zend_vm_execute.h中,这个文件可以通过一个PHP脚本({PHPSRC}/Zend/zend_vm_gen.php)来生成，这个PHP脚本用来生成zend_vm_opcodes.h和zend_vm_execute.h两个文件.

zend_vm_execute.h的内容会根据生成时的参数不同而不同，这里主要是可以定置zend 引擎对op的分发方式，比如用CALL,SWITCH,GOTO,默认的是用CALL，也就是函数调用，所以这里就以函数调用来简单的介绍下这个文件的功能（文件极大，有近36000行，所以不要仔细啃）:

在这个文件中所有定义为 static int ZEND_FASTCALL 并且以 ZEND_* 开头的函数就是op的句柄，此文件中第一个函数execute是执行op的主方法，以这里作为入口执行一连串的op。可以说整个PHP的功能特性都是通过这些op句柄完成的(当然这些句柄会间接调用其他模块中的功能)，那么这154个opcode如何对应到这些static int ZEND_FASTCALL  ZEND_*的执行句柄的呢？

同样在这个文件中，可以看到zend_init_opcodes_handlers函数，这个函数初始化一个 static const opcode_handler_t labels[]数组，这个 labels数组就是handlers的一张表，这个表有近4000个项，有一个算法将一个opcode映射到这个表中的一个元素，算法同样在zend_vm_execute.h中可以找到，靠近文件结尾zend_vm_set_opcode_handler和zend_vm_get_opcode_handler就是这个算法的实现。

那么引擎是如何通过这些op handler实现PHP语言的特性的呢？这里我举一个最简单的例子:考虑下面只有一行的PHP代码

    <?php
        $a = 123;
    ?>

通过某种方法（以后再介绍这些方法）我们可以知道这行代码主要生成一个zend_op，其主要成员值为:

    opcode = 38  (对应#define ZEND_ASSIGN  38)
    op1       = $a ($a变量实际上是以cv形式存在，以后介绍)
    op2       = 123 (以const常量形式存在)
    handler = ZEND_ASSIGN_SPEC_CV_CONST_HANDLER（得到这个handler的名字不是一件容易的事，以后给出方法）

opcode ZEND_ASSIGN的意思是将一个常量赋值给一个cv(compiled variable),这个cv其实就是$a变量的一种存在形式。在zend_vm_execute.h中搜索到ZEND_ASSIGN_SPEC_CV_CONST_HANDLER的定义，其主要功能就是取op2的值123,将其赋值给op1的变量,当然这个过程比想象中的要复杂一些，会有变量的初始化，变量的写时赋值等过程，以后会介绍每一个过程。这样这条PHP语句的功能就完成了。可以看出，op handler只是按照一些固定的方式来对操作数op1 op2（可能还有result）进行操作，handler不理会这些操作数中的具体值，这些值是在编译阶段生成op的时候确定的，比如如果$a = 123 改成 $a =456，那么生成的op中op2就是456了，handler始终按照固定的方式来处理。

因此我们能知道，PHP的执行过程是先通过编译器将PHP代码编译成op code,然后然后zend虚拟机按照一定顺序执行这些opcode,具体是将每个opcode分发给特定的op code handler。

#References

#PHP解释器引擎执行流程

cli（Command Line Interface）即PHP的命令行模式，现在此SAPI是默认安装的，我们在服务器上安装完PHP之后，一般会生成一个可执行文件，假设此文件为/usr/local/bin/php ,那么我们在SHELL下可以用以下命令来执行一个PHP脚本：

    /usr/local/bin/php -f test.php

这个命令将执行当前目录下的test.php脚本，我们暂且不关心test.php具体内容，只关心一下这个执行的内部过程是怎么样的。

cli的主源代码文件在{PHPSRC}/sapi/cli/php_cli.c,整个过程就从这个文件中的 main()函数执行，整个函数比较长，主要可以分为以下几个阶段：

1. 解析命令行参数
2. 初始化环境
3. 编译执行PHP代码
4. 清理环境并返回退出

在第1个阶段中，解析-f参数为执行一个PHP文件，-f后面的test.php就是需要被执行的文件

这里我们将关注第3个阶段，如何执行test.php中的PHP代码。
最终是通过php_execute_script(&file_handle TSRMLS_CC)来执行PHP的脚本，这个函数定义在{PHPSRC}/main/main.c,原型为

    PHPAPI int php_execute_script(zend_file_handle *primary_file TSRMLS_DC)  
file_handle的类型为zend_file_handle，这个是zend对文件句柄的一个封装，里面的内容就是和test.php相关的了。

php_execute_script最终是调用的zend_execute_scripts,这个函数定义在{PHPSRC}/Zend/zend.c,原型为：

    ZEND_API int zend_execute_scripts(int type TSRMLS_DC, zval **retval, int file_count, ...)  
此函数具有可变参数，可以一次执行多个PHP文件，在此函数中最核心的是调用zend_compile_file和zend_execute:

1. zend_compile_file是一个函数指针，其声明在{PHPSRC}/Zend/zend_compile.c:

        ZEND_API zend_op_array *(*zend_compile_file)(zend_file_handle *file_handle, int type TSRMLS_DC);  
    在引擎初始化的时候，会将compile_file函数的地址赋值给zend_compile_file，compile_file函数定义在{PHPSRC}/Zend/zend_language_scanner.c，通过声明可以看到这个函数以zend_file_handle指针作为参数，返回一个指向zend_op_array的指针。

1. zend_execute也是一个函数指针，其声明在{PHPSRC}/Zend/zend_execute.c:

    ZEND_API extern void (*zend_execute)(zend_op_array *op_array TSRMLS_DC);  
    同样在引擎初始化的时候，会将execute函数的地址赋值给zend_execute，execute的定义在{PHPSRC}/Zend/zend_vm_execute.h。

通过声明知道zend_execute以一个指向zend_op_array结构的指针作为参数，这个指针即前面zend_compile_file的返回值，zend_execute就开始执行op_array中的op code，在执行op code的过程中，就实现了PHP语言的各种功能。

PS：为什么要把zend_execute和zend_compile_file定义为函数指针？

       在引擎初始化(zend_startup)的时候，将zend_execute指向了默认的execute,zend_compile_file指向了默认的compile_file。我们可以在实际编译和执行之前将zend_execute和zend_compile_file重写为其他的编译和执行函数，这样就为我们扩展引擎留下了钩子，比如一个比较有名的查看PHP的op code的扩展vld (http://www.derickrethans.nl/projects.html#vld) ,此扩展就是在每次请求初始化的钩子函数（PHP_RINIT_FUNCTION）中，将zend_execute和zend_compile_file替换成自己的vld_execute和vld_compile_file，这两个函数其实是对原始函数进行了封装，添加了输出opcode信息的附加功能，因为引擎初始化是发生在模块请求初始化之前，而模块请求初始化又是在编译和执行之前，所以这样的覆盖能达到目的。

#zend_execute: op执行过程详解

解释器引擎最终执行op的函数是zend_execute，实际上zend_execute是一个函数指针，在引擎初始化的时候zend_execute默认指向了execute,这个execute定义在{PHPSRC}/Zend/zend_vm_execute.h：

    ZEND_API void execute(zend_op_array *op_array TSRMLS_DC)  
此函数的参数为op_array，这是一个指向zend_op_array的指针，op_array是在编译过程中生成，这里有必要介绍一下zend_op_array这个类型.

##zend_op_array简介

此类型的定义在{PHPSRC}/Zend/zend_compile.h:
此结构比较复杂，我们目前只介绍最基本的几个字段。

1. type:

    op_array的类型，首先需要说明的是，一段PHP代码被编译之后，虽然返回的是一个zend_op_array指针，但是实际上生成的zend_op_array结构可能不止一个，通过这个结构中的一些字段,例如function_name ,num_args等你也许会发现这个zend_op_array结构似乎能和函数产生一定的联系，确实如此，*用户自定义的函数，以及用户定义的类的方法，都是一个zend_op_array结构*，这些zend_op_array结构在编译过程中被保存在某些地方，例如用户自定义的函数被保存进了GLOBAL_FUNCTION_TABLE,这个是全局函数符号表，通过函数名可以在此表中检索到函数体。那么编译后返回的那个zend_op_array指针是什么呢，其实编译后返回的zend_op_array是执行的一个入口,也可以认为它是最外层，即不在任何函数体内的全局代码组成的op_array。然而全局代码，用户自定义函数，用户自定义的方法都拥有相同的type值：2 ，type可取值的宏定义为:

        #define ZEND_INTERNAL_FUNCTION              1  
        #define ZEND_USER_FUNCTION                  2  
        #define ZEND_OVERLOADED_FUNCTION            3  
        #define ZEND_EVAL_CODE                      4  
        #define ZEND_OVERLOADED_FUNCTION_TEMPORARY  5  
    可以看到全局代码，用户函数，用户方法都对应的是ZEND_USER_FUNCTION,这个也是最常见的type了，其中ZEND_EVAL_CODE对应的是eval函数中的PHP代码，所以我们可以想到，eval函数参数中的PHP代码也会被编译成单独的zend_op_array。
1. function_name

    如果op_array是由用户定义的函数或则方法编译而生成，那么此字段对应函数的名字，如果是全局代码或则是eval部分的代码，那么此字段为控制
1. opcodes

    这个字段类型为zend_op *,因此这是一个zend_op的数组，这个数组保存的就是此编译过程中生成的op,如果不了解zend_op，可以看看之前的文章 OPcode简介 , 这个字段是最重要的部分了，zend_execute最终就是执行这里保存的op。

现在基本对参数op_array有了一定的了解，那么我们就开始进入到execute中




















