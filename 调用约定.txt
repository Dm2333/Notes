函数调用时，调用者依次把参数压栈，然后调用函数，函数被调用以后，在堆栈中取得数据，并进行计算。函数计算结束以后，或者调用者、或者函数本身修改堆栈，使堆栈恢复原装。在参数传递中，有两个很重要的问题必须得到明确说明：

  1) 当参数个数多于一个时，按照什么顺序把参数压入堆栈；

  2) 函数调用后，由谁来把堆栈恢复原装。

  3）函数的返回值放在什么地方
            
在高级语言中，通过函数调用规范(Calling Conventions)来说明这两个问题。常见的调用规范有：

            stdcall

            cdecl

            fastcall

            thiscall

            naked call

stdcall 很多时候被称为pascal调用规范，因为pascal是早期很常见的一种教学用计算机程序设计语言，其语法严谨，使用的函数调用约定是stdcall。 

stdcall的调用约定意味着：
	  1）参数从右向左压入堆栈；
            2）函数自身修改堆栈；
            3) 函数名自动加前导的下划线，后面紧跟一个@符号，其后紧跟着参数的尺寸。

cdecl调用约定的参数压栈顺序是和stdcall是一样的，参数首先由有向左压入堆栈。所不同的是，函数本身不清理堆栈，调用者负责清理堆栈。由于这 种变化，C调用约定允许函数的参数的个数是不固定的，这也是C语言的一大特色。对于前面的function函数，使用cdecl后的汇编码变成：