
#Tutorial: Basic Unit Testing#

##How to Write a Test##

Test writing using Check is very simple. The file in which the checks are defined must include 'check.h' as so:

    #include <check.h>
    
The basic unit test looks as follows:

    START_TEST(test_name)
    {
        /* unit test code */
    }
    END_TEST
    
The START_TEST/END_TEST pair are macros that setup basic structures to permit testing. It is a mistake to leave off the END_TEST amrker, doing so produces all sorts of strange errors when the check is compiled.

----

##Setting Up the Money Build Using Autotools##

Since we are creating a library to handle money, we will first create an interface in ¡®money.h¡¯, an implementation in ¡®money.c¡¯, and a place to store our unit tests, ¡®check_money.c¡¯. We want to integrate these core files into our build system, and will need some additional structure. To manage everything we¡¯ll use Autoconf, Automake, and friends (collectively known as Autotools) for this example. Note that one could do something similar with ordinary Makefiles, or any other build system. It is in the authors¡¯ opinion that it is generally easier to use Autotools than bare Makefiles, and they provide built-in support for running tests. 

Note that this is not the place to explain how Autotools works. If you need help understanding what¡¯s going on beyond the explanations here, the best place to start is probably Alexandre Duret-Lutz¡¯s excellent Autotools tutorial. 

The examples in this section are part of the Check distribution; you don¡¯t need to spend time cutting and pasting or (worse) retyping them. Locate the Check documentation on your system and look in the ¡®example¡¯ directory. The standard directory for GNU/Linux distributions should be ¡®/usr/share/doc/check/example¡¯. This directory contains the final version reached the end of the tutorial. If you want to follow along, create backups of ¡®money.h¡¯, ¡®money.c¡¯, and ¡®check_money.c¡¯, and then delete the originals. 

We set up a directory structure as follows:

.
|-- Makefile.am
|-- README
|-- configure.ac
|-- src
|   |-- Makefile.am
|   |-- main.c
|   |-- money.c
|   `-- money.h
`-- tests
    |-- Makefile.am
    `-- check_money.c

Note that this is the output of `tree`, a great directory visualization tool. The top-level `Makefile.am` is simple; it merely tells Automake how to process sub-directories:

    SUBDIRS = src . tests

Note that tests comes last, because the code should be testing an already compiled library. `configure.ac` is standard Autoconf boilerplate, as specified by the Autotools tutorial and as suggested by autoscan. 

`src/Makefile.am` builds `libmoney` as a Libtool archive, and links it to an application simply called main. The application¡¯s behavior is not important to this tutorial; what¡¯s important is that none of the functions we want to unit test appear in ¡®main.c¡¯; this probably means that the only function in `main.c` should be main() itself. In order to test the whole application, unit testing is not appropriate: you should use a system testing tool like Autotest. If you really want to test `main()` using Check, rename it to something like `_myproject_main()` and write a wrapper around it. 

The primary build instructions for our unit tests are in ¡®tests/Makefile.am¡¯: 

    ## Process this file with automake to produce Makefile.in

    TESTS = check_money
    check_PROGRAMS = check_money
    check_money_SOURCES = check_money.c $(top_builddir)/src/money.h
    check_money_CFLAGS = @CHECK_CFLAGS@
    check_money_LDADD = $(top_builddir)/src/libmoney.la @CHECK_LIBS@

`TESTS` tells Automake which test programs to run for `make check`. Similarly, the `check_` prefix in `check_PROGRAMS` actually comes from Automake; it says to build these programs only when `make check` is run. (Recall that Automake¡¯s `check` target is the origin of Check¡¯s name.) The `check_money` test is a program that we will build from ¡®tests/check_money.c¡¯, linking it against both ¡®src/libmoney.la¡¯ and the installed ¡®libcheck.la¡¯ on our system. The appropriate compiler and linker flags for using Check are found in @CHECK_CFLAGS@ and @CHECK_LIBS@, values defined by the AM_PATH_CHECK macro. 






















